// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { RegisterData, RegisterResponses, RegisterErrors, LoginData, LoginResponses, LoginErrors, RefreshTokenData, RefreshTokenResponses, RefreshTokenErrors, RequestAccountDeletionData, RequestAccountDeletionResponses, RequestAccountDeletionErrors, ForgotPasswordData, ForgotPasswordResponses, ForgotPasswordErrors, GetAuthGoogleData, GetAuthGoogleResponses, GetAuthGoogleErrors, GetAuthAppleData, GetAuthAppleResponses, GetAuthAppleErrors, GetAuthOauthCallbackData, GetAuthOauthCallbackResponses, GetAuthOauthCallbackErrors, GetAllCitiesData, GetAllCitiesResponses, GetAllCitiesErrors, GetCityByIdData, GetCityByIdResponses, GetCityByIdErrors, GetExpressCategoriesData, GetExpressCategoriesResponses, GetExpressCategoriesErrors, StripeWebhookData, StripeWebhookResponses, StripeWebhookErrors, CreateAvailableAreaRequestData, CreateAvailableAreaRequestResponses, CreateAvailableAreaRequestErrors, GetCurrentUserData, GetCurrentUserResponses, GetCurrentUserErrors, UpdateCurrentUserData, UpdateCurrentUserResponses, UpdateCurrentUserErrors, ContractorJoinRequestData, ContractorJoinRequestResponses, ContractorJoinRequestErrors, GetUserNotificationPermissionsData, GetUserNotificationPermissionsResponses, GetUserNotificationPermissionsErrors, UpdateCurrentUserPermissionsData, UpdateCurrentUserPermissionsResponses, UpdateCurrentUserPermissionsErrors, GetCurrentUserBadgesData, GetCurrentUserBadgesResponses, GetCurrentUserBadgesErrors, UpdateCurrentUserBadgesData, UpdateCurrentUserBadgesResponses, UpdateCurrentUserBadgesErrors, UpdateCurrentUserNotificationTokenData, UpdateCurrentUserNotificationTokenResponses, UpdateCurrentUserNotificationTokenErrors, GetUserAddressesData, GetUserAddressesResponses, GetUserAddressesErrors, CreateUserAddressData, CreateUserAddressResponses, CreateUserAddressErrors, DeleteUserAddressData, DeleteUserAddressResponses, DeleteUserAddressErrors, UpdateUserAddressData, UpdateUserAddressResponses, UpdateUserAddressErrors, SetFavoriteAddressData, SetFavoriteAddressResponses, SetFavoriteAddressErrors, GetUserFavoriteAddressData, GetUserFavoriteAddressResponses, GetUserFavoriteAddressErrors, ValidateUserTokenData, ValidateUserTokenResponses, ValidateUserTokenErrors, GetUserByIdData, GetUserByIdResponses, GetUserByIdErrors, GetSignedUrlData, GetSignedUrlResponses, GetSignedUrlErrors, GetImagesData, GetImagesResponses, GetImagesErrors, AddUploadedImageData, AddUploadedImageResponses, AddUploadedImageErrors, DeleteImageData, DeleteImageResponses, DeleteImageErrors, GetImageData, GetImageResponses, GetImageErrors, UpdateImageData, UpdateImageResponses, UpdateImageErrors, GetContractorData, GetContractorResponses, GetContractorErrors, UpdateContractorImagesData, UpdateContractorImagesResponses, UpdateContractorImagesErrors, GetAvailableContractorsData, GetAvailableContractorsResponses, GetAvailableContractorsErrors, GetIsCurrentUserApprovedAsContractorData, GetIsCurrentUserApprovedAsContractorResponses, GetIsCurrentUserApprovedAsContractorErrors, GetCurrentUserChosenCategoriesData, GetCurrentUserChosenCategoriesResponses, GetCurrentUserChosenCategoriesErrors, ChooseCategoriesAsContractorData, ChooseCategoriesAsContractorResponses, ChooseCategoriesAsContractorErrors, GetContractorMetricsData, GetContractorMetricsResponses, GetContractorMetricsErrors, HideContractorOrderData, HideContractorOrderResponses, HideContractorOrderErrors, GetCurrentContractorDataData, GetCurrentContractorDataResponses, GetCurrentContractorDataErrors, UpdateCurrentContractorDataData, UpdateCurrentContractorDataResponses, UpdateCurrentContractorDataErrors, GetCurrentContractorOrdersData, GetCurrentContractorOrdersResponses, GetCurrentContractorOrdersErrors, GetCurrentContractorReviewsData, GetCurrentContractorReviewsResponses, GetCurrentContractorReviewsErrors, GetOpenRequestsForContractorData, GetOpenRequestsForContractorResponses, GetOpenRequestsForContractorErrors, GetContractorSentRequestsData, GetContractorSentRequestsResponses, GetContractorSentRequestsErrors, GetContractorHistoryRequestsData, GetContractorHistoryRequestsResponses, GetContractorHistoryRequestsErrors, GetContractorInProgressRequestsData, GetContractorInProgressRequestsResponses, GetContractorInProgressRequestsErrors, ChooseCitiesAsContractorData, ChooseCitiesAsContractorResponses, ChooseCitiesAsContractorErrors, GetContractorCitiesData, GetContractorCitiesResponses, GetContractorCitiesErrors, GetContractorByOrderIdData, GetContractorByOrderIdResponses, GetContractorByOrderIdErrors, GetOwnOrdersData, GetOwnOrdersResponses, GetOwnOrdersErrors, CreateOrderData, CreateOrderResponses, CreateOrderErrors, RemoveOrderData, RemoveOrderResponses, RemoveOrderErrors, GetOrderDetailsData, GetOrderDetailsResponses, GetOrderDetailsErrors, UpdateOrderData, UpdateOrderResponses, UpdateOrderErrors, AddOrderImageData, AddOrderImageResponses, AddOrderImageErrors, RemoveDraftData, RemoveDraftResponses, RemoveDraftErrors, GetOwnDraftOrdersData, GetOwnDraftOrdersResponses, GetOwnDraftOrdersErrors, GetOrderImagesData, GetOrderImagesResponses, GetOrderImagesErrors, GetOffersToOrderData, GetOffersToOrderResponses, GetOffersToOrderErrors, AcceptOfferData, AcceptOfferResponses, AcceptOfferErrors, AskMoreInfoData, AskMoreInfoResponses, AskMoreInfoErrors, CreateExpressOrderData, CreateExpressOrderResponses, CreateExpressOrderErrors, GetExpressOrderOptionsData, GetExpressOrderOptionsResponses, GetExpressOrderOptionsErrors, GetOwnExpressOrdersData, GetOwnExpressOrdersResponses, GetOwnExpressOrdersErrors, SearchExpressOrdersData, SearchExpressOrdersResponses, SearchExpressOrdersErrors, AcceptExpressOrderData, AcceptExpressOrderResponses, AcceptExpressOrderErrors, CompleteOrderData, CompleteOrderResponses, CompleteOrderErrors, CompleteExpressOrderData, CompleteExpressOrderResponses, CompleteExpressOrderErrors, GetExpressOrderDetailsData, GetExpressOrderDetailsResponses, GetExpressOrderDetailsErrors, GetExpressOrdersByUserIdData, GetExpressOrdersByUserIdResponses, GetExpressOrdersByUserIdErrors, GetOrdersByUserIdData, GetOrdersByUserIdResponses, GetOrdersByUserIdErrors, GetCustomerServiceTicketsData, GetCustomerServiceTicketsResponses, GetCustomerServiceTicketsErrors, CreateCustomerServiceTicketData, CreateCustomerServiceTicketResponses, CreateCustomerServiceTicketErrors, GetCustomerServiceTicketData, GetCustomerServiceTicketResponses, GetCustomerServiceTicketErrors, AddCustomerServiceTicketMessageData, AddCustomerServiceTicketMessageResponses, AddCustomerServiceTicketMessageErrors, UpdateCustomerServiceTicketData, UpdateCustomerServiceTicketResponses, UpdateCustomerServiceTicketErrors, GetNotificationsData, GetNotificationsResponses, GetNotificationsErrors, MarkNotificationReadData, MarkNotificationReadResponses, MarkNotificationReadErrors, MarkAllNotificationsReadData, MarkAllNotificationsReadResponses, MarkAllNotificationsReadErrors, GetAllOrderMoreInfoRequestsData, GetAllOrderMoreInfoRequestsResponses, GetAllOrderMoreInfoRequestsErrors, GetOrderMoreInfoRequestData, GetOrderMoreInfoRequestResponses, GetOrderMoreInfoRequestErrors, RespondOrderMoreInfoRequestData, RespondOrderMoreInfoRequestResponses, RespondOrderMoreInfoRequestErrors, AddCategoryData, AddCategoryResponses, AddCategoryErrors, AcceptReviewData, AcceptReviewResponses, AcceptReviewErrors, DeclineReviewData, DeclineReviewResponses, DeclineReviewErrors, ApproveContractorData, ApproveContractorResponses, ApproveContractorErrors, DeclineContractorData, DeclineContractorResponses, DeclineContractorErrors, DeleteCategoryData, DeleteCategoryResponses, DeleteCategoryErrors, GetAllReviewsData, GetAllReviewsResponses, GetAllReviewsErrors, GetAllContractorJoinRequestsData, GetAllContractorJoinRequestsResponses, GetAllContractorJoinRequestsErrors, GetAllUsersData, GetAllUsersResponses, GetAllUsersErrors, GetLandingPageAnalyticsData, GetLandingPageAnalyticsResponses, GetLandingPageAnalyticsErrors, GetCategoriesData, GetCategoriesResponses, GetCategoriesErrors, GetAvailableCategoriesData, GetAvailableCategoriesResponses, GetAvailableCategoriesErrors, GetReviewsForContractorData, GetReviewsForContractorResponses, GetReviewsForContractorErrors, AddNewReviewForContractorData, AddNewReviewForContractorResponses, AddNewReviewForContractorErrors, CreatePaymentIntentData, CreatePaymentIntentResponses, CreatePaymentIntentErrors, CreateExpressPaymentIntentData, CreateExpressPaymentIntentResponses, CreateExpressPaymentIntentErrors, CreateStripeAccountLinkData, CreateStripeAccountLinkResponses, CreateStripeAccountLinkErrors, GetUpdateStripeAccountDetailsLinkData, GetUpdateStripeAccountDetailsLinkResponses, GetUpdateStripeAccountDetailsLinkErrors, CancelOfferData, CancelOfferResponses, CancelOfferErrors, CreateOfferData, CreateOfferResponses, CreateOfferErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Register a new user
 */
export const register = <ThrowOnError extends boolean = false>(options?: Options<RegisterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RegisterResponses, RegisterErrors, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Authorize user
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponses, LoginErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh user tokens
 */
export const refreshToken = <ThrowOnError extends boolean = false>(options: Options<RefreshTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RefreshTokenResponses, RefreshTokenErrors, ThrowOnError>({
        url: '/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request account deletion
 */
export const requestAccountDeletion = <ThrowOnError extends boolean = false>(options: Options<RequestAccountDeletionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RequestAccountDeletionResponses, RequestAccountDeletionErrors, ThrowOnError>({
        url: '/auth/request-account-deletion',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Send password reset email
 */
export const forgotPassword = <ThrowOnError extends boolean = false>(options: Options<ForgotPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ForgotPasswordResponses, ForgotPasswordErrors, ThrowOnError>({
        url: '/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Start Google OAuth login
 */
export const getAuthGoogle = <ThrowOnError extends boolean = false>(options?: Options<GetAuthGoogleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuthGoogleResponses, GetAuthGoogleErrors, ThrowOnError>({
        url: '/auth/google',
        ...options
    });
};

/**
 * Start Apple OAuth login
 */
export const getAuthApple = <ThrowOnError extends boolean = false>(options?: Options<GetAuthAppleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuthAppleResponses, GetAuthAppleErrors, ThrowOnError>({
        url: '/auth/apple',
        ...options
    });
};

/**
 * OAuth callback exchange
 */
export const getAuthOauthCallback = <ThrowOnError extends boolean = false>(options: Options<GetAuthOauthCallbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAuthOauthCallbackResponses, GetAuthOauthCallbackErrors, ThrowOnError>({
        url: '/auth/oauth/callback',
        ...options
    });
};

/**
 * Get all cities
 * Get all cities
 */
export const getAllCities = <ThrowOnError extends boolean = false>(options?: Options<GetAllCitiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllCitiesResponses, GetAllCitiesErrors, ThrowOnError>({
        url: '/location/cities',
        ...options
    });
};

/**
 * Get city by id
 * Get city by id
 */
export const getCityById = <ThrowOnError extends boolean = false>(options: Options<GetCityByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCityByIdResponses, GetCityByIdErrors, ThrowOnError>({
        url: '/location/cities/{id}',
        ...options
    });
};

/**
 * Get express categories
 * Get categories that can be ordered as express
 */
export const getExpressCategories = <ThrowOnError extends boolean = false>(options?: Options<GetExpressCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetExpressCategoriesResponses, GetExpressCategoriesErrors, ThrowOnError>({
        url: '/categories/express',
        ...options
    });
};

/**
 * Stripe webhook
 * Stripe webhook
 */
export const stripeWebhook = <ThrowOnError extends boolean = false>(options?: Options<StripeWebhookData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<StripeWebhookResponses, StripeWebhookErrors, ThrowOnError>({
        url: '/public/stripe/webhook',
        ...options
    });
};

/**
 * Notify area available
 */
export const createAvailableAreaRequest = <ThrowOnError extends boolean = false>(options?: Options<CreateAvailableAreaRequestData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateAvailableAreaRequestResponses, CreateAvailableAreaRequestErrors, ThrowOnError>({
        url: '/customer-service/available-area-request',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get current user
 * Get current user
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserResponses, GetCurrentUserErrors, ThrowOnError>({
        url: '/users/me',
        ...options
    });
};

/**
 * Update current user
 * Update current user
 */
export const updateCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<UpdateCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateCurrentUserResponses, UpdateCurrentUserErrors, ThrowOnError>({
        url: '/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Contractor join request
 * User can create a contractor join request to join as a contractor
 */
export const contractorJoinRequest = <ThrowOnError extends boolean = false>(options?: Options<ContractorJoinRequestData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ContractorJoinRequestResponses, ContractorJoinRequestErrors, ThrowOnError>({
        url: '/users/join-as-contractor',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get user notification permissions
 * Get user notification permissions
 */
export const getUserNotificationPermissions = <ThrowOnError extends boolean = false>(options?: Options<GetUserNotificationPermissionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserNotificationPermissionsResponses, GetUserNotificationPermissionsErrors, ThrowOnError>({
        url: '/users/me/notification-permissions',
        ...options
    });
};

/**
 * Update current user permissions
 * Update current user permissions
 */
export const updateCurrentUserPermissions = <ThrowOnError extends boolean = false>(options?: Options<UpdateCurrentUserPermissionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateCurrentUserPermissionsResponses, UpdateCurrentUserPermissionsErrors, ThrowOnError>({
        url: '/users/me/notification-permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get current user badges
 * Get current user badges
 */
export const getCurrentUserBadges = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserBadgesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserBadgesResponses, GetCurrentUserBadgesErrors, ThrowOnError>({
        url: '/users/me/badges',
        ...options
    });
};

/**
 * Update current user badges
 * Update current user badges, if messages or offers are null, they will not be updated. For setting badges as read, set messages and/or offers to 0.
 */
export const updateCurrentUserBadges = <ThrowOnError extends boolean = false>(options?: Options<UpdateCurrentUserBadgesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateCurrentUserBadgesResponses, UpdateCurrentUserBadgesErrors, ThrowOnError>({
        url: '/users/me/badges',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update current user notification token
 * Update current user notification token
 */
export const updateCurrentUserNotificationToken = <ThrowOnError extends boolean = false>(options?: Options<UpdateCurrentUserNotificationTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateCurrentUserNotificationTokenResponses, UpdateCurrentUserNotificationTokenErrors, ThrowOnError>({
        url: '/users/me/notification-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get user addresses
 */
export const getUserAddresses = <ThrowOnError extends boolean = false>(options?: Options<GetUserAddressesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserAddressesResponses, GetUserAddressesErrors, ThrowOnError>({
        url: '/users/addresses',
        ...options
    });
};

/**
 * Add user address, if it is the first address, it will be set as the favorite
 */
export const createUserAddress = <ThrowOnError extends boolean = false>(options?: Options<CreateUserAddressData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateUserAddressResponses, CreateUserAddressErrors, ThrowOnError>({
        url: '/users/addresses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete user address
 */
export const deleteUserAddress = <ThrowOnError extends boolean = false>(options: Options<DeleteUserAddressData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserAddressResponses, DeleteUserAddressErrors, ThrowOnError>({
        url: '/users/addresses/{addressId}',
        ...options
    });
};

/**
 * Update user address
 */
export const updateUserAddress = <ThrowOnError extends boolean = false>(options: Options<UpdateUserAddressData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserAddressResponses, UpdateUserAddressErrors, ThrowOnError>({
        url: '/users/addresses/{addressId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Set favorite address
 */
export const setFavoriteAddress = <ThrowOnError extends boolean = false>(options: Options<SetFavoriteAddressData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SetFavoriteAddressResponses, SetFavoriteAddressErrors, ThrowOnError>({
        url: '/users/addresses/{addressId}/favorite',
        ...options
    });
};

/**
 * Get user favorite address
 */
export const getUserFavoriteAddress = <ThrowOnError extends boolean = false>(options?: Options<GetUserFavoriteAddressData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserFavoriteAddressResponses, GetUserFavoriteAddressErrors, ThrowOnError>({
        url: '/users/addresses/favorite',
        ...options
    });
};

/**
 * Validate user access token
 */
export const validateUserToken = <ThrowOnError extends boolean = false>(options?: Options<ValidateUserTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ValidateUserTokenResponses, ValidateUserTokenErrors, ThrowOnError>({
        url: '/users/tokens/validate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get user by id
 * Get user by id
 */
export const getUserById = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdResponses, GetUserByIdErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Get S3 pre-signed upload URL
 * Returns a pre-signed S3 URL for direct image upload.
 */
export const getSignedUrl = <ThrowOnError extends boolean = false>(options: Options<GetSignedUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSignedUrlResponses, GetSignedUrlErrors, ThrowOnError>({
        url: '/images/signed-url',
        ...options
    });
};

/**
 * Get uploaded images
 * Retrieve images uploaded by the current user
 */
export const getImages = <ThrowOnError extends boolean = false>(options?: Options<GetImagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetImagesResponses, GetImagesErrors, ThrowOnError>({
        url: '/images',
        ...options
    });
};

/**
 * Create uploaded image record
 * Register an uploaded image in the database
 */
export const addUploadedImage = <ThrowOnError extends boolean = false>(options?: Options<AddUploadedImageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AddUploadedImageResponses, AddUploadedImageErrors, ThrowOnError>({
        url: '/images',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete uploaded image
 * Delete an uploaded image record
 */
export const deleteImage = <ThrowOnError extends boolean = false>(options: Options<DeleteImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteImageResponses, DeleteImageErrors, ThrowOnError>({
        url: '/images/{id}',
        ...options
    });
};

/**
 * Get image by id
 * Retrieve a single uploaded image
 */
export const getImage = <ThrowOnError extends boolean = false>(options: Options<GetImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetImageResponses, GetImageErrors, ThrowOnError>({
        url: '/images/{id}',
        ...options
    });
};

/**
 * Update uploaded image
 * Update image metadata
 */
export const updateImage = <ThrowOnError extends boolean = false>(options: Options<UpdateImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateImageResponses, UpdateImageErrors, ThrowOnError>({
        url: '/images/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get contractor
 * Get contractor
 */
export const getContractor = <ThrowOnError extends boolean = false>(options: Options<GetContractorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetContractorResponses, GetContractorErrors, ThrowOnError>({
        url: '/contractors/data/{contractorId}',
        ...options
    });
};

/**
 * Update contractor images
 * Update contractor images, if imageId is not provided, the latest image will be used. This will update the contractor image or contractor header image in the contractor data. Image must be uploaded to the database first.
 */
export const updateContractorImages = <ThrowOnError extends boolean = false>(options?: Options<UpdateContractorImagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UpdateContractorImagesResponses, UpdateContractorImagesErrors, ThrowOnError>({
        url: '/contractors/me/update-images',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get available contractors
 * Fetch contractors available for given category and city
 */
export const getAvailableContractors = <ThrowOnError extends boolean = false>(options?: Options<GetAvailableContractorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAvailableContractorsResponses, GetAvailableContractorsErrors, ThrowOnError>({
        url: '/contractors/available',
        ...options
    });
};

/**
 * Get if current user is approved as contractor
 * Get if current user is approved as contractor
 */
export const getIsCurrentUserApprovedAsContractor = <ThrowOnError extends boolean = false>(options?: Options<GetIsCurrentUserApprovedAsContractorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetIsCurrentUserApprovedAsContractorResponses, GetIsCurrentUserApprovedAsContractorErrors, ThrowOnError>({
        url: '/contractors/me/is-approved',
        ...options
    });
};

/**
 * Get current user chosen categories
 * Get current user chosen categories
 */
export const getCurrentUserChosenCategories = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserChosenCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserChosenCategoriesResponses, GetCurrentUserChosenCategoriesErrors, ThrowOnError>({
        url: '/contractors/me/chosen-categories',
        ...options
    });
};

/**
 * Choose categories as contractor
 * Choose categories as contractor
 */
export const chooseCategoriesAsContractor = <ThrowOnError extends boolean = false>(options?: Options<ChooseCategoriesAsContractorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ChooseCategoriesAsContractorResponses, ChooseCategoriesAsContractorErrors, ThrowOnError>({
        url: '/contractors/me/chosen-categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get contractor metrics
 * Get contractor metrics
 */
export const getContractorMetrics = <ThrowOnError extends boolean = false>(options?: Options<GetContractorMetricsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetContractorMetricsResponses, GetContractorMetricsErrors, ThrowOnError>({
        url: '/contractors/me/metrics',
        ...options
    });
};

/**
 * Hide order
 * Hide order
 */
export const hideContractorOrder = <ThrowOnError extends boolean = false>(options?: Options<HideContractorOrderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<HideContractorOrderResponses, HideContractorOrderErrors, ThrowOnError>({
        url: '/contractors/me/hide-order',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get current contractor data
 * Get current contractor data
 */
export const getCurrentContractorData = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentContractorDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentContractorDataResponses, GetCurrentContractorDataErrors, ThrowOnError>({
        url: '/contractors/me/data',
        ...options
    });
};

/**
 * Update current contractor data
 * Update current contractor data
 */
export const updateCurrentContractorData = <ThrowOnError extends boolean = false>(options?: Options<UpdateCurrentContractorDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<UpdateCurrentContractorDataResponses, UpdateCurrentContractorDataErrors, ThrowOnError>({
        url: '/contractors/me/data',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get current contractor orders
 * Get current contractor orders
 */
export const getCurrentContractorOrders = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentContractorOrdersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentContractorOrdersResponses, GetCurrentContractorOrdersErrors, ThrowOnError>({
        url: '/contractors/me/orders',
        ...options
    });
};

/**
 * Get current contractor reviews
 * Get current contractor reviews
 */
export const getCurrentContractorReviews = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentContractorReviewsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentContractorReviewsResponses, GetCurrentContractorReviewsErrors, ThrowOnError>({
        url: '/contractors/me/reviews',
        ...options
    });
};

/**
 * Get open requests for contractor
 * Get open requests for contractor
 */
export const getOpenRequestsForContractor = <ThrowOnError extends boolean = false>(options?: Options<GetOpenRequestsForContractorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOpenRequestsForContractorResponses, GetOpenRequestsForContractorErrors, ThrowOnError>({
        url: '/orders/contractor/open',
        ...options
    });
};

/**
 * Get sent requests for contractor
 * Get sent requests for contractor
 */
export const getContractorSentRequests = <ThrowOnError extends boolean = false>(options?: Options<GetContractorSentRequestsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetContractorSentRequestsResponses, GetContractorSentRequestsErrors, ThrowOnError>({
        url: '/orders/contractor/sent',
        ...options
    });
};

/**
 * Get history requests for contractor
 * Get history requests for contractor
 */
export const getContractorHistoryRequests = <ThrowOnError extends boolean = false>(options?: Options<GetContractorHistoryRequestsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetContractorHistoryRequestsResponses, GetContractorHistoryRequestsErrors, ThrowOnError>({
        url: '/orders/contractor/history',
        ...options
    });
};

/**
 * Get inprogress requests for contractor
 * Get inprogress requests for contractor
 */
export const getContractorInProgressRequests = <ThrowOnError extends boolean = false>(options?: Options<GetContractorInProgressRequestsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetContractorInProgressRequestsResponses, GetContractorInProgressRequestsErrors, ThrowOnError>({
        url: '/orders/contractor/in-progress',
        ...options
    });
};

/**
 * Choose cities as contractor
 * Choose cities as contractor
 */
export const chooseCitiesAsContractor = <ThrowOnError extends boolean = false>(options?: Options<ChooseCitiesAsContractorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ChooseCitiesAsContractorResponses, ChooseCitiesAsContractorErrors, ThrowOnError>({
        url: '/contractors/me/cities/choose',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get contractor cities
 * Get contractor cities
 */
export const getContractorCities = <ThrowOnError extends boolean = false>(options?: Options<GetContractorCitiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetContractorCitiesResponses, GetContractorCitiesErrors, ThrowOnError>({
        url: '/contractors/me/cities',
        ...options
    });
};

/**
 * Get contractor by order id
 * Get contractor by order id
 */
export const getContractorByOrderId = <ThrowOnError extends boolean = false>(options: Options<GetContractorByOrderIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetContractorByOrderIdResponses, GetContractorByOrderIdErrors, ThrowOnError>({
        url: '/contractors/data/order/{orderId}',
        ...options
    });
};

/**
 * Get all orders for the user
 * Get all orders for the user
 */
export const getOwnOrders = <ThrowOnError extends boolean = false>(options?: Options<GetOwnOrdersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOwnOrdersResponses, GetOwnOrdersErrors, ThrowOnError>({
        url: '/orders',
        ...options
    });
};

/**
 * Create an order
 * Create an order, defaults to isDraft: true
 */
export const createOrder = <ThrowOnError extends boolean = false>(options?: Options<CreateOrderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateOrderResponses, CreateOrderErrors, ThrowOnError>({
        url: '/orders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove an order
 * Remove an order
 */
export const removeOrder = <ThrowOnError extends boolean = false>(options: Options<RemoveOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveOrderResponses, RemoveOrderErrors, ThrowOnError>({
        url: '/orders/{orderId}',
        ...options
    });
};

/**
 * Get order details
 * Get order details
 */
export const getOrderDetails = <ThrowOnError extends boolean = false>(options: Options<GetOrderDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrderDetailsResponses, GetOrderDetailsErrors, ThrowOnError>({
        url: '/orders/{orderId}',
        ...options
    });
};

/**
 * Update an order
 * Update an order
 */
export const updateOrder = <ThrowOnError extends boolean = false>(options: Options<UpdateOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOrderResponses, UpdateOrderErrors, ThrowOnError>({
        url: '/orders/{orderId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add an image to an order
 * Update order images, if imageId is not provided, the latest image will be used. This will update the order image in the order data. Image must be uploaded to the database first.
 */
export const addOrderImage = <ThrowOnError extends boolean = false>(options: Options<AddOrderImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddOrderImageResponses, AddOrderImageErrors, ThrowOnError>({
        url: '/orders/{orderId}/images/{imageId}',
        ...options
    });
};

/**
 * Remove a draft order
 * Remove a draft order
 */
export const removeDraft = <ThrowOnError extends boolean = false>(options: Options<RemoveDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveDraftResponses, RemoveDraftErrors, ThrowOnError>({
        url: '/orders/draft/{orderId}',
        ...options
    });
};

/**
 * Get all draft orders for the user
 * Get all draft orders for the user
 */
export const getOwnDraftOrders = <ThrowOnError extends boolean = false>(options?: Options<GetOwnDraftOrdersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOwnDraftOrdersResponses, GetOwnDraftOrdersErrors, ThrowOnError>({
        url: '/orders/draft',
        ...options
    });
};

/**
 * Get all images for an order
 * Get all images for an order
 */
export const getOrderImages = <ThrowOnError extends boolean = false>(options: Options<GetOrderImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrderImagesResponses, GetOrderImagesErrors, ThrowOnError>({
        url: '/orders/{orderId}/images',
        ...options
    });
};

/**
 * Get all offers to order
 * Get all offers to order
 */
export const getOffersToOrder = <ThrowOnError extends boolean = false>(options: Options<GetOffersToOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOffersToOrderResponses, GetOffersToOrderErrors, ThrowOnError>({
        url: '/orders/{orderId}/offers',
        ...options
    });
};

/**
 * Accept offer
 * Accept offer
 */
export const acceptOffer = <ThrowOnError extends boolean = false>(options: Options<AcceptOfferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AcceptOfferResponses, AcceptOfferErrors, ThrowOnError>({
        url: '/orders/{orderId}/offers/{offerId}/accept',
        ...options
    });
};

/**
 * Ask for more info
 * Ask for more info, from the user about the order
 */
export const askMoreInfo = <ThrowOnError extends boolean = false>(options: Options<AskMoreInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AskMoreInfoResponses, AskMoreInfoErrors, ThrowOnError>({
        url: '/orders/{orderId}/more-info',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create an express order
 * Create an express order
 */
export const createExpressOrder = <ThrowOnError extends boolean = false>(options?: Options<CreateExpressOrderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateExpressOrderResponses, CreateExpressOrderErrors, ThrowOnError>({
        url: '/orders/express',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get express order options
 * Get express order options
 */
export const getExpressOrderOptions = <ThrowOnError extends boolean = false>(options?: Options<GetExpressOrderOptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetExpressOrderOptionsResponses, GetExpressOrderOptionsErrors, ThrowOnError>({
        url: '/orders/express/options',
        ...options
    });
};

/**
 * Get all express orders for the user
 * Get all express orders for the user
 */
export const getOwnExpressOrders = <ThrowOnError extends boolean = false>(options?: Options<GetOwnExpressOrdersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOwnExpressOrdersResponses, GetOwnExpressOrdersErrors, ThrowOnError>({
        url: '/orders/me/express',
        ...options
    });
};

/**
 * Search express orders
 * Search for pending express orders by category and city
 */
export const searchExpressOrders = <ThrowOnError extends boolean = false>(options?: Options<SearchExpressOrdersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SearchExpressOrdersResponses, SearchExpressOrdersErrors, ThrowOnError>({
        url: '/express-orders/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Accept express order
 * Accept express order
 */
export const acceptExpressOrder = <ThrowOnError extends boolean = false>(options: Options<AcceptExpressOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AcceptExpressOrderResponses, AcceptExpressOrderErrors, ThrowOnError>({
        url: '/orders/express/{orderId}/accept',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Complete order
 * Complete order
 */
export const completeOrder = <ThrowOnError extends boolean = false>(options: Options<CompleteOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CompleteOrderResponses, CompleteOrderErrors, ThrowOnError>({
        url: '/orders/{orderId}/complete',
        ...options
    });
};

/**
 * Complete express order and transfer payment
 * Mark express order as complete and transfer payment to contractor
 */
export const completeExpressOrder = <ThrowOnError extends boolean = false>(options: Options<CompleteExpressOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CompleteExpressOrderResponses, CompleteExpressOrderErrors, ThrowOnError>({
        url: '/orders/express/{orderId}/complete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get express order details
 * Get express order details
 */
export const getExpressOrderDetails = <ThrowOnError extends boolean = false>(options: Options<GetExpressOrderDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExpressOrderDetailsResponses, GetExpressOrderDetailsErrors, ThrowOnError>({
        url: '/orders/express/{orderId}/details',
        ...options
    });
};

/**
 * Get express orders by user id
 * Get express orders by user id
 */
export const getExpressOrdersByUserId = <ThrowOnError extends boolean = false>(options: Options<GetExpressOrdersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExpressOrdersByUserIdResponses, GetExpressOrdersByUserIdErrors, ThrowOnError>({
        url: '/users/{userId}/orders/express',
        ...options
    });
};

/**
 * Get orders by user id
 * Get orders by user id
 */
export const getOrdersByUserId = <ThrowOnError extends boolean = false>(options: Options<GetOrdersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrdersByUserIdResponses, GetOrdersByUserIdErrors, ThrowOnError>({
        url: '/users/{userId}/orders',
        ...options
    });
};

/**
 * Get tickets for user
 */
export const getCustomerServiceTickets = <ThrowOnError extends boolean = false>(options?: Options<GetCustomerServiceTicketsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCustomerServiceTicketsResponses, GetCustomerServiceTicketsErrors, ThrowOnError>({
        url: '/customer-service/tickets',
        ...options
    });
};

/**
 * Create customer service ticket
 */
export const createCustomerServiceTicket = <ThrowOnError extends boolean = false>(options?: Options<CreateCustomerServiceTicketData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateCustomerServiceTicketResponses, CreateCustomerServiceTicketErrors, ThrowOnError>({
        url: '/customer-service/tickets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get ticket with messages
 */
export const getCustomerServiceTicket = <ThrowOnError extends boolean = false>(options: Options<GetCustomerServiceTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCustomerServiceTicketResponses, GetCustomerServiceTicketErrors, ThrowOnError>({
        url: '/customer-service/tickets/{id}',
        ...options
    });
};

/**
 * Add message to ticket
 */
export const addCustomerServiceTicketMessage = <ThrowOnError extends boolean = false>(options: Options<AddCustomerServiceTicketMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddCustomerServiceTicketMessageResponses, AddCustomerServiceTicketMessageErrors, ThrowOnError>({
        url: '/customer-service/tickets/{id}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update customer service ticket
 * Update a customer service ticket
 */
export const updateCustomerServiceTicket = <ThrowOnError extends boolean = false>(options: Options<UpdateCustomerServiceTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCustomerServiceTicketResponses, UpdateCustomerServiceTicketErrors, ThrowOnError>({
        url: '/customer-service/tickets/{ticketId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get notifications for current user
 */
export const getNotifications = <ThrowOnError extends boolean = false>(options?: Options<GetNotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNotificationsResponses, GetNotificationsErrors, ThrowOnError>({
        url: '/notifications',
        ...options
    });
};

/**
 * Mark notification as read
 */
export const markNotificationRead = <ThrowOnError extends boolean = false>(options: Options<MarkNotificationReadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarkNotificationReadResponses, MarkNotificationReadErrors, ThrowOnError>({
        url: '/notifications/{id}/read',
        ...options
    });
};

/**
 * Mark all notifications as read
 */
export const markAllNotificationsRead = <ThrowOnError extends boolean = false>(options?: Options<MarkAllNotificationsReadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<MarkAllNotificationsReadResponses, MarkAllNotificationsReadErrors, ThrowOnError>({
        url: '/notifications/mark-all-read',
        ...options
    });
};

/**
 * Get order more info requests for user
 */
export const getAllOrderMoreInfoRequests = <ThrowOnError extends boolean = false>(options?: Options<GetAllOrderMoreInfoRequestsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllOrderMoreInfoRequestsResponses, GetAllOrderMoreInfoRequestsErrors, ThrowOnError>({
        url: '/order-more-info-requests',
        ...options
    });
};

/**
 * Get a single order more info request
 */
export const getOrderMoreInfoRequest = <ThrowOnError extends boolean = false>(options: Options<GetOrderMoreInfoRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrderMoreInfoRequestResponses, GetOrderMoreInfoRequestErrors, ThrowOnError>({
        url: '/order-more-info-requests/{id}',
        ...options
    });
};

/**
 * Respond to more info request
 */
export const respondOrderMoreInfoRequest = <ThrowOnError extends boolean = false>(options: Options<RespondOrderMoreInfoRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RespondOrderMoreInfoRequestResponses, RespondOrderMoreInfoRequestErrors, ThrowOnError>({
        url: '/order-more-info-requests/{id}/response',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add category
 * Add a category
 */
export const addCategory = <ThrowOnError extends boolean = false>(options?: Options<AddCategoryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AddCategoryResponses, AddCategoryErrors, ThrowOnError>({
        url: '/admin/categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Accept review
 * Accept a review
 */
export const acceptReview = <ThrowOnError extends boolean = false>(options?: Options<AcceptReviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AcceptReviewResponses, AcceptReviewErrors, ThrowOnError>({
        url: '/admin/reviews/accept',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Decline review
 * Decline a review
 */
export const declineReview = <ThrowOnError extends boolean = false>(options?: Options<DeclineReviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DeclineReviewResponses, DeclineReviewErrors, ThrowOnError>({
        url: '/admin/reviews/decline',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Approve contractor
 * Approve a contractor
 */
export const approveContractor = <ThrowOnError extends boolean = false>(options?: Options<ApproveContractorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ApproveContractorResponses, ApproveContractorErrors, ThrowOnError>({
        url: '/admin/contractor/approve',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Decline contractor
 * Decline a contractor
 */
export const declineContractor = <ThrowOnError extends boolean = false>(options?: Options<DeclineContractorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DeclineContractorResponses, DeclineContractorErrors, ThrowOnError>({
        url: '/admin/contractor/decline',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete category
 * Delete a category
 */
export const deleteCategory = <ThrowOnError extends boolean = false>(options: Options<DeleteCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCategoryResponses, DeleteCategoryErrors, ThrowOnError>({
        url: '/admin/categories/{categoryId}',
        ...options
    });
};

/**
 * Get all reviews
 * Get all reviews
 */
export const getAllReviews = <ThrowOnError extends boolean = false>(options?: Options<GetAllReviewsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllReviewsResponses, GetAllReviewsErrors, ThrowOnError>({
        url: '/admin/reviews',
        ...options
    });
};

/**
 * Get all contractor join requests
 * Get all contractor join requests
 */
export const getAllContractorJoinRequests = <ThrowOnError extends boolean = false>(options?: Options<GetAllContractorJoinRequestsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllContractorJoinRequestsResponses, GetAllContractorJoinRequestsErrors, ThrowOnError>({
        url: '/admin/contractor/join-requests',
        ...options
    });
};

/**
 * Get all users
 * Get all users
 */
export const getAllUsers = <ThrowOnError extends boolean = false>(options?: Options<GetAllUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllUsersResponses, GetAllUsersErrors, ThrowOnError>({
        url: '/admin/users',
        ...options
    });
};

/**
 * Get landing page analytics
 * Get landing page analytics
 */
export const getLandingPageAnalytics = <ThrowOnError extends boolean = false>(options?: Options<GetLandingPageAnalyticsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLandingPageAnalyticsResponses, GetLandingPageAnalyticsErrors, ThrowOnError>({
        url: '/admin/analytics/landing-page',
        ...options
    });
};

/**
 * Get categories
 * Get categories
 */
export const getCategories = <ThrowOnError extends boolean = false>(options?: Options<GetCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCategoriesResponses, GetCategoriesErrors, ThrowOnError>({
        url: '/categories',
        ...options
    });
};

/**
 * Get available categories
 * Get available categories
 */
export const getAvailableCategories = <ThrowOnError extends boolean = false>(options?: Options<GetAvailableCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAvailableCategoriesResponses, GetAvailableCategoriesErrors, ThrowOnError>({
        url: '/available/categories/available',
        ...options
    });
};

/**
 * Get reviews for a contractor
 * Get reviews for a contractor
 */
export const getReviewsForContractor = <ThrowOnError extends boolean = false>(options: Options<GetReviewsForContractorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetReviewsForContractorResponses, GetReviewsForContractorErrors, ThrowOnError>({
        url: '/reviews/contractor/{contractorId}',
        ...options
    });
};

/**
 * Add a new review for a contractor
 * Add a new review for a contractor
 */
export const addNewReviewForContractor = <ThrowOnError extends boolean = false>(options: Options<AddNewReviewForContractorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddNewReviewForContractorResponses, AddNewReviewForContractorErrors, ThrowOnError>({
        url: '/reviews/contractor/{contractorId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a payment intent
 * Create a payment intent
 */
export const createPaymentIntent = <ThrowOnError extends boolean = false>(options?: Options<CreatePaymentIntentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreatePaymentIntentResponses, CreatePaymentIntentErrors, ThrowOnError>({
        url: '/payment/create-payment-intent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create an express payment intent
 * Create an express payment intent
 */
export const createExpressPaymentIntent = <ThrowOnError extends boolean = false>(options?: Options<CreateExpressPaymentIntentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateExpressPaymentIntentResponses, CreateExpressPaymentIntentErrors, ThrowOnError>({
        url: '/payment/create-express-payment-intent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a Stripe account link
 * A Stripe Account Link is a URL that you generate to direct users to Stripe hosted onboarding flow
 */
export const createStripeAccountLink = <ThrowOnError extends boolean = false>(options?: Options<CreateStripeAccountLinkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateStripeAccountLinkResponses, CreateStripeAccountLinkErrors, ThrowOnError>({
        url: '/billing/account/create/link',
        ...options
    });
};

/**
 * Update a Stripe account details link
 * A Stripe Account Details Link is a URL that you generate to direct users to Stripe hosted onboarding flow
 */
export const getUpdateStripeAccountDetailsLink = <ThrowOnError extends boolean = false>(options?: Options<GetUpdateStripeAccountDetailsLinkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GetUpdateStripeAccountDetailsLinkResponses, GetUpdateStripeAccountDetailsLinkErrors, ThrowOnError>({
        url: '/billing/account/update/link',
        ...options
    });
};

/**
 * Cancel offer
 * Cancel offer
 */
export const cancelOffer = <ThrowOnError extends boolean = false>(options?: Options<CancelOfferData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CancelOfferResponses, CancelOfferErrors, ThrowOnError>({
        url: '/offers/{offerId}/cancel',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create offer
 * Create offer
 */
export const createOffer = <ThrowOnError extends boolean = false>(options?: Options<CreateOfferData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateOfferResponses, CreateOfferErrors, ThrowOnError>({
        url: '/offers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};