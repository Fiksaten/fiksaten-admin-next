// This file is auto-generated by @hey-api/openapi-ts

export type RegisterData = {
    body?: {
        email: string;
        firstname: string;
        lastname: string;
        password: string;
        phoneNumber: string;
    };
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type RegisterErrors = {
    /**
     * Bad Request
     */
    400: {
        message: string;
        details?: string;
    };
    /**
     * Server Error
     */
    500: {
        message: string;
        details?: string;
    };
};

export type RegisterError = RegisterErrors[keyof RegisterErrors];

export type RegisterResponses = {
    /**
     * User created successfully
     */
    200: {
        message: string;
        refreshToken?: string;
        accessToken?: string;
        username?: string;
        userId?: string;
        requiresEmailVerification?: boolean;
        user: {
            id: string;
            externalId: string | null;
            firstname: string | null;
            lastname: string | null;
            email: string;
            phoneNumber: string | null;
            stripeCustomerId: string | null;
            badgeCountOffers: number;
            badgeCountMessages: number;
            role: 'consumer' | 'admin' | 'contractor';
            pushNotificationPermission: boolean | null;
            smsPermission: boolean | null;
            emailPermission: boolean | null;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type RegisterResponse = RegisterResponses[keyof RegisterResponses];

export type LoginData = {
    /**
     * Request body
     */
    body: {
        email: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type LoginErrors = {
    /**
     * Bad Request
     */
    400: {
        message: string;
        details: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
        details: string;
    };
    /**
     * Server Error
     */
    500: {
        message: string;
    };
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
    /**
     * Success
     */
    200: {
        accessToken: string;
        refreshToken: string;
        username: string;
    };
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type RefreshTokenData = {
    /**
     * Request body
     */
    body: {
        refreshToken: string;
        username: string;
    };
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type RefreshTokenErrors = {
    /**
     * Bad Request
     */
    400: {
        message: string;
        details?: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
        details?: string;
    };
    /**
     * Server Error
     */
    500: {
        message: string;
        details?: string;
    };
};

export type RefreshTokenError = RefreshTokenErrors[keyof RefreshTokenErrors];

export type RefreshTokenResponses = {
    /**
     * Success
     */
    200: {
        accessToken: string;
        refreshToken: string;
    };
};

export type RefreshTokenResponse = RefreshTokenResponses[keyof RefreshTokenResponses];

export type RequestAccountDeletionData = {
    /**
     * Request body
     */
    body: {
        id?: string;
        email: string;
        firstName?: string | null;
        lastName?: string | null;
        reason?: string | null;
        created_at?: string;
    };
    path?: never;
    query?: never;
    url: '/auth/request-account-deletion';
};

export type RequestAccountDeletionErrors = {
    /**
     * Bad Request
     */
    400: {
        message: string;
        details?: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
        details?: string;
    };
    /**
     * Server Error
     */
    500: {
        message: string;
        details?: string;
    };
};

export type RequestAccountDeletionError = RequestAccountDeletionErrors[keyof RequestAccountDeletionErrors];

export type RequestAccountDeletionResponses = {
    /**
     * Success
     */
    200: {
        message: string;
    };
};

export type RequestAccountDeletionResponse = RequestAccountDeletionResponses[keyof RequestAccountDeletionResponses];

export type ForgotPasswordData = {
    /**
     * Request body
     */
    body: {
        email: string;
    };
    path?: never;
    query?: never;
    url: '/auth/forgot-password';
};

export type ForgotPasswordErrors = {
    /**
     * Bad Request
     */
    400: {
        message: string;
        details?: string;
    };
    /**
     * Server Error
     */
    500: {
        message: string;
        details?: string;
    };
};

export type ForgotPasswordError = ForgotPasswordErrors[keyof ForgotPasswordErrors];

export type ForgotPasswordResponses = {
    /**
     * Success
     */
    200: {
        message: string;
    };
};

export type ForgotPasswordResponse = ForgotPasswordResponses[keyof ForgotPasswordResponses];

export type GetAuthGoogleData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/google';
};

export type GetAuthGoogleErrors = {
    /**
     * Server error
     */
    500: {
        message: string;
    };
};

export type GetAuthGoogleError = GetAuthGoogleErrors[keyof GetAuthGoogleErrors];

export type GetAuthGoogleResponses = {
    /**
     * URL created
     */
    200: {
        url: string;
    };
};

export type GetAuthGoogleResponse = GetAuthGoogleResponses[keyof GetAuthGoogleResponses];

export type GetAuthAppleData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/apple';
};

export type GetAuthAppleErrors = {
    /**
     * Server error
     */
    500: {
        message: string;
    };
};

export type GetAuthAppleError = GetAuthAppleErrors[keyof GetAuthAppleErrors];

export type GetAuthAppleResponses = {
    /**
     * URL created
     */
    200: {
        url: string;
    };
};

export type GetAuthAppleResponse = GetAuthAppleResponses[keyof GetAuthAppleResponses];

export type GetAuthOauthCallbackData = {
    body?: never;
    path?: never;
    query: {
        code: string;
    };
    url: '/auth/oauth/callback';
};

export type GetAuthOauthCallbackErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Server error
     */
    500: {
        message: string;
    };
};

export type GetAuthOauthCallbackError = GetAuthOauthCallbackErrors[keyof GetAuthOauthCallbackErrors];

export type GetAuthOauthCallbackResponses = {
    /**
     * Login successful
     */
    200: {
        accessToken: string;
        refreshToken: string;
        username: string;
    };
};

export type GetAuthOauthCallbackResponse = GetAuthOauthCallbackResponses[keyof GetAuthOauthCallbackResponses];

export type GetAllCitiesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/location/cities';
};

export type GetAllCitiesErrors = {
    /**
     * No cities found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetAllCitiesError = GetAllCitiesErrors[keyof GetAllCitiesErrors];

export type GetAllCitiesResponses = {
    /**
     * Cities fetched successfully
     */
    200: Array<{
        id: string;
        cityName: string;
        createdAt: string;
        updatedAt: string;
    }>;
};

export type GetAllCitiesResponse = GetAllCitiesResponses[keyof GetAllCitiesResponses];

export type GetCityByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/location/cities/{id}';
};

export type GetCityByIdErrors = {
    /**
     * No city found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetCityByIdError = GetCityByIdErrors[keyof GetCityByIdErrors];

export type GetCityByIdResponses = {
    /**
     * City fetched successfully
     */
    200: {
        id: string;
        cityName: string;
        createdAt: string;
        updatedAt: string;
    };
};

export type GetCityByIdResponse = GetCityByIdResponses[keyof GetCityByIdResponses];

export type GetExpressCategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/categories/express';
};

export type GetExpressCategoriesErrors = {
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetExpressCategoriesError = GetExpressCategoriesErrors[keyof GetExpressCategoriesErrors];

export type GetExpressCategoriesResponses = {
    /**
     * Express categories fetched successfully
     */
    200: Array<{
        id: string;
        name: string;
        imageUrl: string;
        description: string | null;
        express: boolean;
        expressPrice: string | null;
        createdAt: string;
        updatedAt: string;
        extraQuestions?: Array<{
            id: string;
            categoryId: string;
            questionText: string;
            pickerType: 'DROPDOWN' | 'TEXTFIELD' | 'TEXTAREA' | 'SWITCH';
            options: Array<string | null> | null;
        }>;
    }>;
};

export type GetExpressCategoriesResponse = GetExpressCategoriesResponses[keyof GetExpressCategoriesResponses];

export type StripeWebhookData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/public/stripe/webhook';
};

export type StripeWebhookErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
};

export type StripeWebhookError = StripeWebhookErrors[keyof StripeWebhookErrors];

export type StripeWebhookResponses = {
    /**
     * Stripe webhook received
     */
    200: {
        received: boolean;
    };
};

export type StripeWebhookResponse = StripeWebhookResponses[keyof StripeWebhookResponses];

export type CreateAvailableAreaRequestData = {
    body?: {
        email: string;
        cityName: string;
    };
    path?: never;
    query?: never;
    url: '/customer-service/available-area-request';
};

export type CreateAvailableAreaRequestErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type CreateAvailableAreaRequestError = CreateAvailableAreaRequestErrors[keyof CreateAvailableAreaRequestErrors];

export type CreateAvailableAreaRequestResponses = {
    /**
     * Available area request created
     */
    200: {
        message: string;
    };
};

export type CreateAvailableAreaRequestResponse = CreateAvailableAreaRequestResponses[keyof CreateAvailableAreaRequestResponses];

export type GetCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type GetCurrentUserErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Member or organization not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetCurrentUserError = GetCurrentUserErrors[keyof GetCurrentUserErrors];

export type GetCurrentUserResponses = {
    /**
     * User fetched successfully
     */
    200: {
        id: string;
        externalId: string | null;
        firstname: string | null;
        lastname: string | null;
        email: string;
        phoneNumber: string | null;
        stripeCustomerId: string | null;
        badgeCountOffers: number;
        badgeCountMessages: number;
        role: 'consumer' | 'admin' | 'contractor';
        pushNotificationPermission: boolean | null;
        smsPermission: boolean | null;
        emailPermission: boolean | null;
        createdAt: string;
        updatedAt: string;
    };
};

export type GetCurrentUserResponse = GetCurrentUserResponses[keyof GetCurrentUserResponses];

export type UpdateCurrentUserData = {
    body?: {
        id?: string;
        externalId?: string | null;
        firstname?: string | null;
        lastname?: string | null;
        email: string;
        phoneNumber?: string | null;
        stripeCustomerId?: string | null;
        badgeCountOffers?: number;
        badgeCountMessages?: number;
        role?: 'consumer' | 'admin' | 'contractor';
        pushNotificationPermission?: boolean | null;
        smsPermission?: boolean | null;
        emailPermission?: boolean | null;
    };
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UpdateCurrentUserErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type UpdateCurrentUserError = UpdateCurrentUserErrors[keyof UpdateCurrentUserErrors];

export type UpdateCurrentUserResponses = {
    /**
     * User updated successfully
     */
    200: {
        id: string;
        externalId: string | null;
        firstname: string | null;
        lastname: string | null;
        email: string;
        phoneNumber: string | null;
        stripeCustomerId: string | null;
        badgeCountOffers: number;
        badgeCountMessages: number;
        role: 'consumer' | 'admin' | 'contractor';
        pushNotificationPermission: boolean | null;
        smsPermission: boolean | null;
        emailPermission: boolean | null;
        createdAt: string;
        updatedAt: string;
    };
};

export type UpdateCurrentUserResponse = UpdateCurrentUserResponses[keyof UpdateCurrentUserResponses];

export type ContractorJoinRequestData = {
    body?: {
        name: string;
        description: string;
        website?: string | null;
        email: string;
        phone: string;
        addressStreet?: string | null;
        addressDetail?: string | null;
        addressZip?: string | null;
        addressCountry?: string | null;
        imageUrl?: string | null;
        businessId?: string | null;
        businessType?: string | null;
        headerImageUrl?: string | null;
        stripeConnectAccountId?: string | null;
        stripeConnected?: boolean;
        iban?: string | null;
        bic?: string | null;
    };
    path?: never;
    query?: never;
    url: '/users/join-as-contractor';
};

export type ContractorJoinRequestErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type ContractorJoinRequestError = ContractorJoinRequestErrors[keyof ContractorJoinRequestErrors];

export type ContractorJoinRequestResponses = {
    /**
     * Contractor join request created successfully
     */
    200: {
        message: string;
    };
};

export type ContractorJoinRequestResponse = ContractorJoinRequestResponses[keyof ContractorJoinRequestResponses];

export type GetUserNotificationPermissionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me/notification-permissions';
};

export type GetUserNotificationPermissionsErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetUserNotificationPermissionsError = GetUserNotificationPermissionsErrors[keyof GetUserNotificationPermissionsErrors];

export type GetUserNotificationPermissionsResponses = {
    /**
     * User updated successfully
     */
    200: {
        emailPermission: boolean | null;
        pushNotificationPermission: boolean | null;
        smsPermission: boolean | null;
    };
};

export type GetUserNotificationPermissionsResponse = GetUserNotificationPermissionsResponses[keyof GetUserNotificationPermissionsResponses];

export type UpdateCurrentUserPermissionsData = {
    body?: {
        emailPermission: boolean | null;
        pushNotificationPermission: boolean | null;
        smsPermission: boolean | null;
    };
    path?: never;
    query?: never;
    url: '/users/me/notification-permissions';
};

export type UpdateCurrentUserPermissionsErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type UpdateCurrentUserPermissionsError = UpdateCurrentUserPermissionsErrors[keyof UpdateCurrentUserPermissionsErrors];

export type UpdateCurrentUserPermissionsResponses = {
    /**
     * User updated successfully
     */
    200: {
        emailPermission: boolean | null;
        pushNotificationPermission: boolean | null;
        smsPermission: boolean | null;
    };
};

export type UpdateCurrentUserPermissionsResponse = UpdateCurrentUserPermissionsResponses[keyof UpdateCurrentUserPermissionsResponses];

export type GetCurrentUserBadgesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me/badges';
};

export type GetCurrentUserBadgesErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetCurrentUserBadgesError = GetCurrentUserBadgesErrors[keyof GetCurrentUserBadgesErrors];

export type GetCurrentUserBadgesResponses = {
    /**
     * User badges retrieved successfully
     */
    200: {
        messages: number | null;
        offers: number | null;
    };
};

export type GetCurrentUserBadgesResponse = GetCurrentUserBadgesResponses[keyof GetCurrentUserBadgesResponses];

export type UpdateCurrentUserBadgesData = {
    body?: {
        messages: number | null;
        offers: number | null;
    };
    path?: never;
    query?: never;
    url: '/users/me/badges';
};

export type UpdateCurrentUserBadgesErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type UpdateCurrentUserBadgesError = UpdateCurrentUserBadgesErrors[keyof UpdateCurrentUserBadgesErrors];

export type UpdateCurrentUserBadgesResponses = {
    /**
     * User badges updated successfully
     */
    200: {
        message: string;
    };
};

export type UpdateCurrentUserBadgesResponse = UpdateCurrentUserBadgesResponses[keyof UpdateCurrentUserBadgesResponses];

export type UpdateCurrentUserNotificationTokenData = {
    body?: {
        token: string;
        appType: 'contractor' | 'consumer';
    };
    path?: never;
    query?: never;
    url: '/users/me/notification-token';
};

export type UpdateCurrentUserNotificationTokenErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type UpdateCurrentUserNotificationTokenError = UpdateCurrentUserNotificationTokenErrors[keyof UpdateCurrentUserNotificationTokenErrors];

export type UpdateCurrentUserNotificationTokenResponses = {
    /**
     * User notification token updated successfully
     */
    200: {
        message: string;
    };
};

export type UpdateCurrentUserNotificationTokenResponse = UpdateCurrentUserNotificationTokenResponses[keyof UpdateCurrentUserNotificationTokenResponses];

export type GetUserAddressesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/addresses';
};

export type GetUserAddressesErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetUserAddressesError = GetUserAddressesErrors[keyof GetUserAddressesErrors];

export type GetUserAddressesResponses = {
    /**
     * Addresses fetched
     */
    200: Array<{
        id: string;
        userId: string;
        street: string;
        detail: string | null;
        zip: string;
        country: string;
        title: string | null;
        city: string;
        favorite: boolean;
        createdAt: string;
        updatedAt: string;
    }>;
};

export type GetUserAddressesResponse = GetUserAddressesResponses[keyof GetUserAddressesResponses];

export type CreateUserAddressData = {
    body?: {
        street: string;
        detail?: string | null;
        zip: string;
        country: string;
        title?: string | null;
        city: string;
        favorite?: boolean;
    };
    path?: never;
    query?: never;
    url: '/users/addresses';
};

export type CreateUserAddressErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type CreateUserAddressError = CreateUserAddressErrors[keyof CreateUserAddressErrors];

export type CreateUserAddressResponses = {
    /**
     * Address created
     */
    200: {
        id: string;
        userId: string;
        street: string;
        detail: string | null;
        zip: string;
        country: string;
        title: string | null;
        city: string;
        favorite: boolean;
        createdAt: string;
        updatedAt: string;
    };
};

export type CreateUserAddressResponse = CreateUserAddressResponses[keyof CreateUserAddressResponses];

export type DeleteUserAddressData = {
    body?: never;
    path: {
        addressId: string;
    };
    query?: never;
    url: '/users/addresses/{addressId}';
};

export type DeleteUserAddressErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type DeleteUserAddressError = DeleteUserAddressErrors[keyof DeleteUserAddressErrors];

export type DeleteUserAddressResponses = {
    /**
     * Address deleted
     */
    200: {
        message: string;
    };
};

export type DeleteUserAddressResponse = DeleteUserAddressResponses[keyof DeleteUserAddressResponses];

export type UpdateUserAddressData = {
    body?: {
        street: string;
        detail?: string | null;
        zip: string;
        country: string;
        title?: string | null;
        city: string;
        favorite?: boolean;
    };
    path: {
        addressId: string;
    };
    query?: never;
    url: '/users/addresses/{addressId}';
};

export type UpdateUserAddressErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Address not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type UpdateUserAddressError = UpdateUserAddressErrors[keyof UpdateUserAddressErrors];

export type UpdateUserAddressResponses = {
    /**
     * Address updated
     */
    200: {
        id: string;
        userId: string;
        street: string;
        detail: string | null;
        zip: string;
        country: string;
        title: string | null;
        city: string;
        favorite: boolean;
        createdAt: string;
        updatedAt: string;
    };
};

export type UpdateUserAddressResponse = UpdateUserAddressResponses[keyof UpdateUserAddressResponses];

export type SetFavoriteAddressData = {
    body?: never;
    path: {
        addressId: string;
    };
    query?: never;
    url: '/users/addresses/{addressId}/favorite';
};

export type SetFavoriteAddressErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User or address not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type SetFavoriteAddressError = SetFavoriteAddressErrors[keyof SetFavoriteAddressErrors];

export type SetFavoriteAddressResponses = {
    /**
     * Favorite address set
     */
    200: {
        id: string;
        userId: string;
        street: string;
        detail: string | null;
        zip: string;
        country: string;
        title: string | null;
        city: string;
        favorite: boolean;
        createdAt: string;
        updatedAt: string;
    };
};

export type SetFavoriteAddressResponse = SetFavoriteAddressResponses[keyof SetFavoriteAddressResponses];

export type GetUserFavoriteAddressData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/addresses/favorite';
};

export type GetUserFavoriteAddressErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetUserFavoriteAddressError = GetUserFavoriteAddressErrors[keyof GetUserFavoriteAddressErrors];

export type GetUserFavoriteAddressResponses = {
    /**
     * Favorite address
     */
    200: {
        id: string;
        userId: string;
        street: string;
        detail: string | null;
        zip: string;
        country: string;
        title: string | null;
        city: string;
        favorite: boolean;
        createdAt: string;
        updatedAt: string;
    } | null;
};

export type GetUserFavoriteAddressResponse = GetUserFavoriteAddressResponses[keyof GetUserFavoriteAddressResponses];

export type ValidateUserTokenData = {
    body?: {
        token: string;
    };
    path?: never;
    query?: never;
    url: '/users/tokens/validate';
};

export type ValidateUserTokenErrors = {
    /**
     * Invalid token
     */
    401: {
        valid: boolean;
        message: string;
    };
    /**
     * Server Error
     */
    500: {
        message: string;
    };
};

export type ValidateUserTokenError = ValidateUserTokenErrors[keyof ValidateUserTokenErrors];

export type ValidateUserTokenResponses = {
    /**
     * Token is valid
     */
    200: {
        valid: boolean;
    };
};

export type ValidateUserTokenResponse = ValidateUserTokenResponses[keyof ValidateUserTokenResponses];

export type GetUserByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type GetUserByIdErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Member or organization not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetUserByIdError = GetUserByIdErrors[keyof GetUserByIdErrors];

export type GetUserByIdResponses = {
    /**
     * User fetched successfully
     */
    200: {
        id: string;
        externalId: string | null;
        firstname: string | null;
        lastname: string | null;
        email: string;
        phoneNumber: string | null;
        stripeCustomerId: string | null;
        badgeCountOffers: number;
        badgeCountMessages: number;
        role: 'consumer' | 'admin' | 'contractor';
        pushNotificationPermission: boolean | null;
        smsPermission: boolean | null;
        emailPermission: boolean | null;
        createdAt: string;
        updatedAt: string;
    };
};

export type GetUserByIdResponse = GetUserByIdResponses[keyof GetUserByIdResponses];

export type GetSignedUrlData = {
    body?: never;
    path?: never;
    query: {
        fileType: string;
        fileName: string;
    };
    url: '/images/signed-url';
};

export type GetSignedUrlErrors = {
    /**
     * Invalid request
     */
    400: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetSignedUrlError = GetSignedUrlErrors[keyof GetSignedUrlErrors];

export type GetSignedUrlResponses = {
    /**
     * Pre-signed URL generated
     */
    200: {
        url: string;
    };
};

export type GetSignedUrlResponse = GetSignedUrlResponses[keyof GetSignedUrlResponses];

export type GetImagesData = {
    body?: never;
    path?: never;
    query?: {
        type?: 'profile' | 'contractor' | 'order' | 'category' | 'contractorHeader';
    };
    url: '/images';
};

export type GetImagesErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
};

export type GetImagesError = GetImagesErrors[keyof GetImagesErrors];

export type GetImagesResponses = {
    /**
     * List of images
     */
    200: Array<{
        id: string;
        imageUrl: string;
        imageType: 'profile' | 'contractor' | 'order' | 'category' | 'contractorHeader';
        createdAt: string;
    }>;
};

export type GetImagesResponse = GetImagesResponses[keyof GetImagesResponses];

export type AddUploadedImageData = {
    body?: {
        imageUrl: string;
        imageType?: string;
        updatedAt?: string;
    };
    path?: never;
    query?: never;
    url: '/images';
};

export type AddUploadedImageErrors = {
    /**
     * Invalid request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type AddUploadedImageError = AddUploadedImageErrors[keyof AddUploadedImageErrors];

export type AddUploadedImageResponses = {
    /**
     * Image added to the database
     */
    200: {
        imageId: string;
    };
};

export type AddUploadedImageResponse = AddUploadedImageResponses[keyof AddUploadedImageResponses];

export type DeleteImageData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/images/{id}';
};

export type DeleteImageErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
};

export type DeleteImageError = DeleteImageErrors[keyof DeleteImageErrors];

export type DeleteImageResponses = {
    /**
     * Image deleted
     */
    200: {
        message: string;
    };
};

export type DeleteImageResponse = DeleteImageResponses[keyof DeleteImageResponses];

export type GetImageData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/images/{id}';
};

export type GetImageErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Image not found
     */
    404: {
        message: string;
    };
};

export type GetImageError = GetImageErrors[keyof GetImageErrors];

export type GetImageResponses = {
    /**
     * Image data
     */
    200: {
        id: string;
        imageUrl: string;
        imageType: 'profile' | 'contractor' | 'order' | 'category' | 'contractorHeader';
        createdAt: string;
    };
};

export type GetImageResponse = GetImageResponses[keyof GetImageResponses];

export type UpdateImageData = {
    body?: {
        imageType?: 'profile' | 'contractor' | 'order' | 'category' | 'contractorHeader';
        imageUrl?: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/images/{id}';
};

export type UpdateImageErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Image not found
     */
    404: {
        message: string;
    };
};

export type UpdateImageError = UpdateImageErrors[keyof UpdateImageErrors];

export type UpdateImageResponses = {
    /**
     * Updated image
     */
    200: {
        id: string;
        imageUrl: string;
        imageType: 'profile' | 'contractor' | 'order' | 'category' | 'contractorHeader';
        createdAt: string;
    };
};

export type UpdateImageResponse = UpdateImageResponses[keyof UpdateImageResponses];

export type GetContractorData = {
    body?: never;
    path: {
        contractorId: string;
    };
    query?: never;
    url: '/contractors/data/{contractorId}';
};

export type GetContractorErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Contractor not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetContractorError = GetContractorErrors[keyof GetContractorErrors];

export type GetContractorResponses = {
    /**
     * Contractor fetched successfully
     */
    200: {
        userId: string;
        name: string;
        description: string;
        website: string | null;
        email: string;
        phone: string;
        addressStreet: string | null;
        addressDetail: string | null;
        addressZip: string | null;
        addressCountry: string | null;
        imageUrl: string | null;
        reviewAverage: string | null;
        reviewCount: number | null;
        verified: boolean | null;
        businessId: string | null;
        businessType: string | null;
        headerImageUrl: string | null;
        stripeConnectAccountId: string | null;
        stripeConnected: boolean;
        iban: string | null;
        bic: string | null;
        stripeAccountId: string | null;
        approvalStatus: string | null;
        createdAt: string;
        updatedAt: string;
    };
};

export type GetContractorResponse = GetContractorResponses[keyof GetContractorResponses];

export type UpdateContractorImagesData = {
    body?: {
        imageType: 'contractor' | 'contractorHeader';
        imageId?: string;
    };
    path?: never;
    query?: never;
    url: '/contractors/me/update-images';
};

export type UpdateContractorImagesErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Member or organization not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type UpdateContractorImagesError = UpdateContractorImagesErrors[keyof UpdateContractorImagesErrors];

export type UpdateContractorImagesResponses = {
    /**
     * Contractor images updated successfully
     */
    200: {
        message: string;
    };
};

export type UpdateContractorImagesResponse = UpdateContractorImagesResponses[keyof UpdateContractorImagesResponses];

export type GetAvailableContractorsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/contractors/available';
};

export type GetAvailableContractorsErrors = {
    /**
     * Bad request, categoryId and cityId are required
     */
    400: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetAvailableContractorsError = GetAvailableContractorsErrors[keyof GetAvailableContractorsErrors];

export type GetAvailableContractorsResponses = {
    /**
     * Contractors fetched successfully
     */
    200: Array<{
        userId: string;
        name: string;
        description: string;
        website: string | null;
        email: string;
        phone: string;
        addressStreet: string | null;
        addressDetail: string | null;
        addressZip: string | null;
        addressCountry: string | null;
        imageUrl: string | null;
        reviewAverage: string | null;
        reviewCount: number | null;
        verified: boolean | null;
        businessId: string | null;
        businessType: string | null;
        headerImageUrl: string | null;
        stripeConnectAccountId: string | null;
        stripeConnected: boolean;
        iban: string | null;
        bic: string | null;
        stripeAccountId: string | null;
        approvalStatus: string | null;
        createdAt: string;
        updatedAt: string;
    }>;
};

export type GetAvailableContractorsResponse = GetAvailableContractorsResponses[keyof GetAvailableContractorsResponses];

export type GetIsCurrentUserApprovedAsContractorData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/contractors/me/is-approved';
};

export type GetIsCurrentUserApprovedAsContractorErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetIsCurrentUserApprovedAsContractorError = GetIsCurrentUserApprovedAsContractorErrors[keyof GetIsCurrentUserApprovedAsContractorErrors];

export type GetIsCurrentUserApprovedAsContractorResponses = {
    /**
     * User is approved as contractor
     */
    200: {
        isApproved: boolean;
    };
};

export type GetIsCurrentUserApprovedAsContractorResponse = GetIsCurrentUserApprovedAsContractorResponses[keyof GetIsCurrentUserApprovedAsContractorResponses];

export type GetCurrentUserChosenCategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/contractors/me/chosen-categories';
};

export type GetCurrentUserChosenCategoriesErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetCurrentUserChosenCategoriesError = GetCurrentUserChosenCategoriesErrors[keyof GetCurrentUserChosenCategoriesErrors];

export type GetCurrentUserChosenCategoriesResponses = {
    /**
     * Current user chosen categories
     */
    200: {
        categories: Array<{
            id: string;
            name: string;
            imageUrl: string;
            description: string | null;
            express: boolean;
            expressPrice: string | null;
            extraQuestions?: Array<{
                id: string;
                categoryId: string;
                questionText: string;
                pickerType: 'DROPDOWN' | 'TEXTFIELD' | 'TEXTAREA' | 'SWITCH';
                options: Array<string | null> | null;
            }>;
            categoryId: string;
        }>;
    };
};

export type GetCurrentUserChosenCategoriesResponse = GetCurrentUserChosenCategoriesResponses[keyof GetCurrentUserChosenCategoriesResponses];

export type ChooseCategoriesAsContractorData = {
    body?: {
        categoryIds: Array<string>;
    };
    path?: never;
    query?: never;
    url: '/contractors/me/chosen-categories';
};

export type ChooseCategoriesAsContractorErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Contractor not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type ChooseCategoriesAsContractorError = ChooseCategoriesAsContractorErrors[keyof ChooseCategoriesAsContractorErrors];

export type ChooseCategoriesAsContractorResponses = {
    /**
     * Categories chosen
     */
    200: {
        message: string;
    };
};

export type ChooseCategoriesAsContractorResponse = ChooseCategoriesAsContractorResponses[keyof ChooseCategoriesAsContractorResponses];

export type GetContractorMetricsData = {
    body?: never;
    path?: never;
    query?: {
        startDate?: string;
        endDate?: string;
        sort?: 'newest_date' | 'oldest_date' | 'smallest_budget' | 'biggest_budget';
    };
    url: '/contractors/me/metrics';
};

export type GetContractorMetricsErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Contractor not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetContractorMetricsError = GetContractorMetricsErrors[keyof GetContractorMetricsErrors];

export type GetContractorMetricsResponses = {
    /**
     * Contractor metrics
     */
    200: {
        metrics: {
            totalMaterialCost: number;
            avgRating: number;
            totalProjects: number;
            avgBudget: number;
            offerAcceptanceRate: number;
            retentionRate: number;
            totalRevenue: number;
            topClients: Array<{
                clientId: string;
                clientName: string;
                clientRating: number;
                clientTotalProjects: number;
            }>;
            mostCommonCategories: Array<{
                categoryId: string;
                categoryName: string;
            }>;
            startDate: string;
            endDate: string;
        };
    };
};

export type GetContractorMetricsResponse = GetContractorMetricsResponses[keyof GetContractorMetricsResponses];

export type HideContractorOrderData = {
    body?: {
        orderId: string;
    };
    path?: never;
    query?: never;
    url: '/contractors/me/hide-order';
};

export type HideContractorOrderErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type HideContractorOrderError = HideContractorOrderErrors[keyof HideContractorOrderErrors];

export type HideContractorOrderResponses = {
    /**
     * Order hidden
     */
    200: {
        message: string;
    };
};

export type HideContractorOrderResponse = HideContractorOrderResponses[keyof HideContractorOrderResponses];

export type GetCurrentContractorDataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/contractors/me/data';
};

export type GetCurrentContractorDataErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetCurrentContractorDataError = GetCurrentContractorDataErrors[keyof GetCurrentContractorDataErrors];

export type GetCurrentContractorDataResponses = {
    /**
     * Current contractor data
     */
    200: {
        id: string;
        externalId: string | null;
        firstname: string | null;
        lastname: string | null;
        email: string;
        phoneNumber: string | null;
        stripeCustomerId: string | null;
        badgeCountOffers: number;
        badgeCountMessages: number;
        role: 'consumer' | 'admin' | 'contractor';
        pushNotificationPermission: boolean | null;
        smsPermission: boolean | null;
        emailPermission: boolean | null;
        contractor: {
            userId: string;
            name: string;
            description: string;
            website: string | null;
            email: string;
            phone: string;
            addressStreet: string | null;
            addressDetail: string | null;
            addressZip: string | null;
            addressCountry: string | null;
            imageUrl: string | null;
            reviewAverage: string | null;
            reviewCount: number | null;
            verified: boolean | null;
            businessId: string | null;
            businessType: string | null;
            headerImageUrl: string | null;
            stripeConnectAccountId: string | null;
            stripeConnected: boolean;
            iban: string | null;
            bic: string | null;
            stripeAccountId: string | null;
            approvalStatus: string | null;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type GetCurrentContractorDataResponse = GetCurrentContractorDataResponses[keyof GetCurrentContractorDataResponses];

export type UpdateCurrentContractorDataData = {
    body?: {
        name: string;
        description: string;
        website?: string | null;
        email: string;
        phone: string;
        addressStreet?: string | null;
        addressDetail?: string | null;
        addressZip?: string | null;
        addressCountry?: string | null;
        imageUrl?: string | null;
        reviewAverage?: string | null;
        reviewCount?: number | null;
        verified?: boolean | null;
        businessId?: string | null;
        businessType?: string | null;
        headerImageUrl?: string | null;
        stripeConnectAccountId?: string | null;
        stripeConnected?: boolean;
        iban?: string | null;
        bic?: string | null;
        stripeAccountId?: string | null;
        approvalStatus?: string | null;
    };
    path?: never;
    query?: never;
    url: '/contractors/me/data';
};

export type UpdateCurrentContractorDataErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Contractor not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type UpdateCurrentContractorDataError = UpdateCurrentContractorDataErrors[keyof UpdateCurrentContractorDataErrors];

export type UpdateCurrentContractorDataResponses = {
    /**
     * Contractor data updated
     */
    200: {
        message: string;
    };
};

export type UpdateCurrentContractorDataResponse = UpdateCurrentContractorDataResponses[keyof UpdateCurrentContractorDataResponses];

export type GetCurrentContractorOrdersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/contractors/me/orders';
};

export type GetCurrentContractorOrdersErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Contractor not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetCurrentContractorOrdersError = GetCurrentContractorOrdersErrors[keyof GetCurrentContractorOrdersErrors];

export type GetCurrentContractorOrdersResponses = {
    /**
     * Current contractor orders
     */
    200: {
        orders: Array<{
            id: string;
            userId: string;
            contractorId: string | null;
            categoryId: string | null;
            description: string | null;
            budget: number | null;
            status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
            orderStreet: string | null;
            orderCity: string | null;
            orderZip: string | null;
            locationMoreInfo: string | null;
            paymentIntentId: string | null;
            offersCount: number;
            doneAt: string | null;
            isDraft: boolean;
            draftStage: number;
            receiptUrl: string | null;
            createdAt: string;
            updatedAt: string;
        }>;
    };
};

export type GetCurrentContractorOrdersResponse = GetCurrentContractorOrdersResponses[keyof GetCurrentContractorOrdersResponses];

export type GetCurrentContractorReviewsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/contractors/me/reviews';
};

export type GetCurrentContractorReviewsErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Contractor not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetCurrentContractorReviewsError = GetCurrentContractorReviewsErrors[keyof GetCurrentContractorReviewsErrors];

export type GetCurrentContractorReviewsResponses = {
    /**
     * Current contractor reviews
     */
    200: {
        reviews: Array<{
            id: string;
            userId: string;
            contractorId: string;
            orderId: string;
            accepted: boolean;
            starRating: number;
            reviewTitle: string;
            review: string;
            createdAt: string;
            updatedAt: string;
        }>;
    };
};

export type GetCurrentContractorReviewsResponse = GetCurrentContractorReviewsResponses[keyof GetCurrentContractorReviewsResponses];

export type GetOpenRequestsForContractorData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/orders/contractor/open';
};

export type GetOpenRequestsForContractorErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Contractor not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetOpenRequestsForContractorError = GetOpenRequestsForContractorErrors[keyof GetOpenRequestsForContractorErrors];

export type GetOpenRequestsForContractorResponses = {
    /**
     * Contractor fetched successfully
     */
    200: Array<{
        id: string;
        userId: string;
        contractorId: string | null;
        categoryId: string | null;
        description: string | null;
        budget: number | null;
        status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
        orderStreet: string | null;
        orderCity: string | null;
        orderZip: string | null;
        locationMoreInfo: string | null;
        paymentIntentId: string | null;
        offersCount: number;
        doneAt: string | null;
        isDraft: boolean;
        draftStage: number;
        receiptUrl: string | null;
        createdAt: string;
        updatedAt: string;
        category: {
            id: string;
            name: string;
            imageUrl: string;
            description: string | null;
            express: boolean;
            expressPrice: string | null;
        } | null;
        city: {
            id: string;
            cityName: string;
        } | null;
        user: {
            id: string;
            firstname: string | null;
            lastname: string | null;
            email: string;
            phoneNumber: string | null;
        } | null;
    }>;
};

export type GetOpenRequestsForContractorResponse = GetOpenRequestsForContractorResponses[keyof GetOpenRequestsForContractorResponses];

export type GetContractorSentRequestsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/orders/contractor/sent';
};

export type GetContractorSentRequestsErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Contractor not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetContractorSentRequestsError = GetContractorSentRequestsErrors[keyof GetContractorSentRequestsErrors];

export type GetContractorSentRequestsResponses = {
    /**
     * Contractor fetched successfully
     */
    200: Array<{
        id: string;
        userId: string;
        contractorId: string | null;
        categoryId: string | null;
        description: string | null;
        budget: number | null;
        status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
        orderStreet: string | null;
        orderCity: string | null;
        orderZip: string | null;
        locationMoreInfo: string | null;
        paymentIntentId: string | null;
        offersCount: number;
        doneAt: string | null;
        isDraft: boolean;
        draftStage: number;
        receiptUrl: string | null;
        createdAt: string;
        updatedAt: string;
        category: {
            id: string;
            name: string;
            imageUrl: string;
            description: string | null;
            express: boolean;
            expressPrice: string | null;
        } | null;
        city: {
            id: string;
            cityName: string;
        } | null;
        user: {
            id: string;
            firstname: string | null;
            lastname: string | null;
            email: string;
            phoneNumber: string | null;
        } | null;
    }>;
};

export type GetContractorSentRequestsResponse = GetContractorSentRequestsResponses[keyof GetContractorSentRequestsResponses];

export type GetContractorHistoryRequestsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/orders/contractor/history';
};

export type GetContractorHistoryRequestsErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Contractor not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetContractorHistoryRequestsError = GetContractorHistoryRequestsErrors[keyof GetContractorHistoryRequestsErrors];

export type GetContractorHistoryRequestsResponses = {
    /**
     * Contractor fetched successfully
     */
    200: Array<{
        id: string;
        userId: string;
        contractorId: string | null;
        categoryId: string | null;
        description: string | null;
        budget: number | null;
        status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
        orderStreet: string | null;
        orderCity: string | null;
        orderZip: string | null;
        locationMoreInfo: string | null;
        paymentIntentId: string | null;
        offersCount: number;
        doneAt: string | null;
        isDraft: boolean;
        draftStage: number;
        receiptUrl: string | null;
        createdAt: string;
        updatedAt: string;
        category: {
            id: string;
            name: string;
            imageUrl: string;
            description: string | null;
            express: boolean;
            expressPrice: string | null;
        } | null;
        city: {
            id: string;
            cityName: string;
        } | null;
        user: {
            id: string;
            firstname: string | null;
            lastname: string | null;
            email: string;
            phoneNumber: string | null;
        } | null;
    }>;
};

export type GetContractorHistoryRequestsResponse = GetContractorHistoryRequestsResponses[keyof GetContractorHistoryRequestsResponses];

export type GetContractorInProgressRequestsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/orders/contractor/in-progress';
};

export type GetContractorInProgressRequestsErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Contractor not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetContractorInProgressRequestsError = GetContractorInProgressRequestsErrors[keyof GetContractorInProgressRequestsErrors];

export type GetContractorInProgressRequestsResponses = {
    /**
     * Contractor fetched successfully
     */
    200: Array<{
        id: string;
        userId: string;
        contractorId: string | null;
        categoryId: string | null;
        description: string | null;
        budget: number | null;
        status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
        orderStreet: string | null;
        orderCity: string | null;
        orderZip: string | null;
        locationMoreInfo: string | null;
        paymentIntentId: string | null;
        offersCount: number;
        doneAt: string | null;
        isDraft: boolean;
        draftStage: number;
        receiptUrl: string | null;
        createdAt: string;
        updatedAt: string;
        category: {
            id: string;
            name: string;
            imageUrl: string;
            description: string | null;
            express: boolean;
            expressPrice: string | null;
        } | null;
        city: {
            id: string;
            cityName: string;
        } | null;
        user: {
            id: string;
            firstname: string | null;
            lastname: string | null;
            email: string;
            phoneNumber: string | null;
        } | null;
    }>;
};

export type GetContractorInProgressRequestsResponse = GetContractorInProgressRequestsResponses[keyof GetContractorInProgressRequestsResponses];

export type ChooseCitiesAsContractorData = {
    body?: {
        cityIds: Array<string>;
    };
    path?: never;
    query?: never;
    url: '/contractors/me/cities/choose';
};

export type ChooseCitiesAsContractorErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type ChooseCitiesAsContractorError = ChooseCitiesAsContractorErrors[keyof ChooseCitiesAsContractorErrors];

export type ChooseCitiesAsContractorResponses = {
    /**
     * Contractor cities
     */
    200: Array<{
        id: string;
        contractorId: string;
        cityId: string;
        createdAt: string;
        updatedAt: string;
    }>;
};

export type ChooseCitiesAsContractorResponse = ChooseCitiesAsContractorResponses[keyof ChooseCitiesAsContractorResponses];

export type GetContractorCitiesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/contractors/me/cities';
};

export type GetContractorCitiesErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetContractorCitiesError = GetContractorCitiesErrors[keyof GetContractorCitiesErrors];

export type GetContractorCitiesResponses = {
    /**
     * Contractor cities
     */
    200: Array<{
        id: string;
        contractorId: string;
        cityId: string;
        createdAt: string;
        updatedAt: string;
    }>;
};

export type GetContractorCitiesResponse = GetContractorCitiesResponses[keyof GetContractorCitiesResponses];

export type GetContractorByOrderIdData = {
    body?: never;
    path: {
        orderId: string;
    };
    query?: never;
    url: '/contractors/data/order/{orderId}';
};

export type GetContractorByOrderIdErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Contractor not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetContractorByOrderIdError = GetContractorByOrderIdErrors[keyof GetContractorByOrderIdErrors];

export type GetContractorByOrderIdResponses = {
    /**
     * Contractor fetched successfully
     */
    200: {
        userId: string;
        name: string;
        description: string;
        website: string | null;
        email: string;
        phone: string;
        addressStreet: string | null;
        addressDetail: string | null;
        addressZip: string | null;
        addressCountry: string | null;
        imageUrl: string | null;
        reviewAverage: string | null;
        reviewCount: number | null;
        verified: boolean | null;
        headerImageUrl: string | null;
        stripeConnectAccountId: string | null;
        stripeConnected: boolean;
    };
};

export type GetContractorByOrderIdResponse = GetContractorByOrderIdResponses[keyof GetContractorByOrderIdResponses];

export type GetOwnOrdersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/orders';
};

export type GetOwnOrdersErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetOwnOrdersError = GetOwnOrdersErrors[keyof GetOwnOrdersErrors];

export type GetOwnOrdersResponses = {
    /**
     * Order created successfully
     */
    200: {
        orders: Array<{
            id: string;
            userId: string;
            contractorId: string | null;
            categoryId: string | null;
            description: string | null;
            budget: number | null;
            status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
            orderStreet: string | null;
            orderCity: string | null;
            orderZip: string | null;
            locationMoreInfo: string | null;
            paymentIntentId: string | null;
            offersCount: number;
            doneAt: string | null;
            isDraft: boolean;
            draftStage: number;
            receiptUrl: string | null;
            createdAt: string;
            updatedAt: string;
            category: {
                id: string;
                name: string;
                imageUrl: string;
                description: string | null;
                express: boolean;
                expressPrice: string | null;
            };
            city: {
                id: string;
                cityName: string;
            };
            user: {
                id: string;
                firstname: string | null;
                lastname: string | null;
                email: string;
                phoneNumber: string | null;
            };
        }>;
    };
};

export type GetOwnOrdersResponse = GetOwnOrdersResponses[keyof GetOwnOrdersResponses];

export type CreateOrderData = {
    body?: {
        categoryId?: string | null;
        description?: string | null;
        budget?: number | null;
        status?: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
        orderStreet?: string | null;
        orderCity?: string | null;
        orderZip?: string | null;
        locationMoreInfo?: string | null;
        paymentIntentId?: string | null;
        offersCount?: number;
        doneAt?: string | null;
        isDraft?: boolean;
        draftStage?: number;
        receiptUrl?: string | null;
    };
    path?: never;
    query?: never;
    url: '/orders';
};

export type CreateOrderErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type CreateOrderError = CreateOrderErrors[keyof CreateOrderErrors];

export type CreateOrderResponses = {
    /**
     * Order created successfully
     */
    200: {
        order: {
            id: string;
            userId: string;
            contractorId: string | null;
            categoryId: string | null;
            description: string | null;
            budget: number | null;
            status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
            orderStreet: string | null;
            orderCity: string | null;
            orderZip: string | null;
            locationMoreInfo: string | null;
            paymentIntentId: string | null;
            offersCount: number;
            doneAt: string | null;
            isDraft: boolean;
            draftStage: number;
            receiptUrl: string | null;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type CreateOrderResponse = CreateOrderResponses[keyof CreateOrderResponses];

export type RemoveOrderData = {
    body?: never;
    path: {
        orderId: string;
    };
    query?: never;
    url: '/orders/{orderId}';
};

export type RemoveOrderErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type RemoveOrderError = RemoveOrderErrors[keyof RemoveOrderErrors];

export type RemoveOrderResponses = {
    /**
     * Order removed successfully
     */
    200: {
        message: string;
    };
};

export type RemoveOrderResponse = RemoveOrderResponses[keyof RemoveOrderResponses];

export type GetOrderDetailsData = {
    body?: never;
    path: {
        orderId: string;
    };
    query?: never;
    url: '/orders/{orderId}';
};

export type GetOrderDetailsErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetOrderDetailsError = GetOrderDetailsErrors[keyof GetOrderDetailsErrors];

export type GetOrderDetailsResponses = {
    /**
     * Order created successfully
     */
    200: {
        order: {
            id: string;
            userId: string;
            contractorId: string | null;
            categoryId: string | null;
            description: string | null;
            budget: number | null;
            status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
            orderStreet: string | null;
            orderCity: string | null;
            orderZip: string | null;
            locationMoreInfo: string | null;
            paymentIntentId: string | null;
            offersCount: number;
            doneAt: string | null;
            isDraft: boolean;
            draftStage: number;
            receiptUrl: string | null;
            createdAt: string;
            updatedAt: string;
            category: {
                id: string;
                name: string;
                imageUrl: string;
                description: string | null;
                express: boolean;
                expressPrice: string | null;
            };
            city: {
                id: string;
                cityName: string;
            };
            user: {
                id: string;
                firstname: string | null;
                lastname: string | null;
                email: string;
                phoneNumber: string | null;
            };
            orderImages: Array<{
                id: string;
                orderId: string | null;
                imageUrl: string;
            } | null>;
            moreInfoRequest: {
                id: string;
                orderId: string;
                contractorId: string;
                status: string;
                userId: string;
                inquiry: string;
            } | null;
            moreInfoRequestResponses: Array<{
                id: string;
                orderMoreInfoRequestId: string;
                response: string;
                userId: string;
                contractorId: string;
            }>;
            offers: Array<{
                id: string;
                orderId: string;
                contractorId: string;
                categoryId: string;
                date: string | null;
                startTime: string | null;
                endTime: string | null;
                offerPrice: string | null;
                materialCost: string | null;
                offerDescription: string | null;
                status: 'pending' | 'accepted' | 'declined';
            }>;
        };
    };
};

export type GetOrderDetailsResponse = GetOrderDetailsResponses[keyof GetOrderDetailsResponses];

export type UpdateOrderData = {
    body?: {
        id?: string;
        userId?: string;
        contractorId?: string | null;
        categoryId?: string | null;
        description?: string | null;
        budget?: number | null;
        status?: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
        orderStreet?: string | null;
        orderCity?: string | null;
        orderZip?: string | null;
        locationMoreInfo?: string | null;
        paymentIntentId?: string | null;
        offersCount?: number;
        doneAt?: string | null;
        isDraft?: boolean;
        draftStage?: number;
        receiptUrl?: string | null;
        createdAt?: string;
        updatedAt?: string;
    };
    path: {
        orderId: string;
    };
    query?: never;
    url: '/orders/{orderId}';
};

export type UpdateOrderErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type UpdateOrderError = UpdateOrderErrors[keyof UpdateOrderErrors];

export type UpdateOrderResponses = {
    /**
     * Order created successfully
     */
    200: {
        order: {
            id: string;
            userId: string;
            contractorId: string | null;
            categoryId: string | null;
            description: string | null;
            budget: number | null;
            status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
            orderStreet: string | null;
            orderCity: string | null;
            orderZip: string | null;
            locationMoreInfo: string | null;
            paymentIntentId: string | null;
            offersCount: number;
            doneAt: string | null;
            isDraft: boolean;
            draftStage: number;
            receiptUrl: string | null;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type UpdateOrderResponse = UpdateOrderResponses[keyof UpdateOrderResponses];

export type AddOrderImageData = {
    body?: never;
    path: {
        orderId: string;
        imageId: string;
    };
    query?: never;
    url: '/orders/{orderId}/images/{imageId}';
};

export type AddOrderImageErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type AddOrderImageError = AddOrderImageErrors[keyof AddOrderImageErrors];

export type AddOrderImageResponses = {
    /**
     * Order images updated successfully
     */
    200: {
        message: string;
    };
};

export type AddOrderImageResponse = AddOrderImageResponses[keyof AddOrderImageResponses];

export type RemoveDraftData = {
    body?: never;
    path: {
        orderId: string;
    };
    query?: never;
    url: '/orders/draft/{orderId}';
};

export type RemoveDraftErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Draft order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type RemoveDraftError = RemoveDraftErrors[keyof RemoveDraftErrors];

export type RemoveDraftResponses = {
    /**
     * Draft order removed successfully
     */
    200: {
        message: string;
    };
};

export type RemoveDraftResponse = RemoveDraftResponses[keyof RemoveDraftResponses];

export type GetOwnDraftOrdersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/orders/draft';
};

export type GetOwnDraftOrdersErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetOwnDraftOrdersError = GetOwnDraftOrdersErrors[keyof GetOwnDraftOrdersErrors];

export type GetOwnDraftOrdersResponses = {
    /**
     * Order created successfully
     */
    200: {
        orders: Array<{
            id: string;
            userId: string;
            contractorId: string | null;
            categoryId: string | null;
            description: string | null;
            budget: number | null;
            status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
            orderStreet: string | null;
            orderCity: string | null;
            orderZip: string | null;
            locationMoreInfo: string | null;
            paymentIntentId: string | null;
            offersCount: number;
            doneAt: string | null;
            isDraft: boolean;
            draftStage: number;
            receiptUrl: string | null;
            createdAt: string;
            updatedAt: string;
            category: {
                id: string;
                name: string;
                imageUrl: string;
                description: string | null;
                express: boolean;
                expressPrice: string | null;
            };
            city: {
                id: string;
                cityName: string;
            };
            user: {
                id: string;
                firstname: string | null;
                lastname: string | null;
                email: string;
                phoneNumber: string | null;
            };
        }>;
    };
};

export type GetOwnDraftOrdersResponse = GetOwnDraftOrdersResponses[keyof GetOwnDraftOrdersResponses];

export type GetOrderImagesData = {
    body?: never;
    path: {
        orderId: string;
    };
    query?: never;
    url: '/orders/{orderId}/images';
};

export type GetOrderImagesErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetOrderImagesError = GetOrderImagesErrors[keyof GetOrderImagesErrors];

export type GetOrderImagesResponses = {
    /**
     * Order created successfully
     */
    200: {
        images: Array<{
            id: string;
            orderId: string | null;
            imageUrl: string;
            createdAt: string;
            updatedAt: string;
        }>;
    };
};

export type GetOrderImagesResponse = GetOrderImagesResponses[keyof GetOrderImagesResponses];

export type GetOffersToOrderData = {
    body?: never;
    path: {
        orderId: string;
    };
    query?: never;
    url: '/orders/{orderId}/offers';
};

export type GetOffersToOrderErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetOffersToOrderError = GetOffersToOrderErrors[keyof GetOffersToOrderErrors];

export type GetOffersToOrderResponses = {
    /**
     * Offers to order retrieved successfully
     */
    200: {
        offers: Array<{
            id: string;
            orderId: string;
            contractorId: string;
            categoryId: string;
            date: string | null;
            startTime: string | null;
            endTime: string | null;
            offerPrice: string | null;
            materialCost: string | null;
            offerDescription: string | null;
            status: 'pending' | 'accepted' | 'declined';
            createdAt: string;
            updatedAt: string;
        }>;
    };
};

export type GetOffersToOrderResponse = GetOffersToOrderResponses[keyof GetOffersToOrderResponses];

export type AcceptOfferData = {
    body?: never;
    path: {
        orderId: string;
        offerId: string;
    };
    query?: never;
    url: '/orders/{orderId}/offers/{offerId}/accept';
};

export type AcceptOfferErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type AcceptOfferError = AcceptOfferErrors[keyof AcceptOfferErrors];

export type AcceptOfferResponses = {
    /**
     * Offer accepted successfully
     */
    200: {
        message: string;
    };
};

export type AcceptOfferResponse = AcceptOfferResponses[keyof AcceptOfferResponses];

export type AskMoreInfoData = {
    body?: {
        orderId: string;
        inquiry: string;
    };
    path: {
        orderId: string;
    };
    query?: never;
    url: '/orders/{orderId}/more-info';
};

export type AskMoreInfoErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type AskMoreInfoError = AskMoreInfoErrors[keyof AskMoreInfoErrors];

export type AskMoreInfoResponses = {
    /**
     * More info requested successfully
     */
    200: {
        message: string;
    };
};

export type AskMoreInfoResponse = AskMoreInfoResponses[keyof AskMoreInfoResponses];

export type CreateExpressOrderData = {
    body?: {
        categoryId: string;
        orderStreet?: string | null;
        orderCity?: string | null;
        orderZip?: string | null;
        startTime: string;
        endTime: string;
        weekdays?: Array<string | null> | null;
        chosenDay?: string | null;
        chosenStartTime?: string | null;
        userHasNeededTools?: boolean;
        receiptUrl?: string | null;
        extraQuestionAnswers?: Array<{
            questionId: string;
            answer: string;
        }>;
    };
    path?: never;
    query?: never;
    url: '/orders/express';
};

export type CreateExpressOrderErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Express order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type CreateExpressOrderError = CreateExpressOrderErrors[keyof CreateExpressOrderErrors];

export type CreateExpressOrderResponses = {
    /**
     * Express order created successfully
     */
    200: {
        order: {
            id: string;
            userId: string;
            contractorId: string | null;
            categoryId: string;
            status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
            paymentIntentId: string | null;
            completionCode: string | null;
            orderStreet: string | null;
            orderCity: string | null;
            orderZip: string | null;
            startTime: string;
            endTime: string;
            weekdays: Array<string | null> | null;
            chosenDay: string | null;
            chosenStartTime: string | null;
            doneAt: string | null;
            userHasNeededTools: boolean;
            receiptUrl: string | null;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type CreateExpressOrderResponse = CreateExpressOrderResponses[keyof CreateExpressOrderResponses];

export type GetExpressOrderOptionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/orders/express/options';
};

export type GetExpressOrderOptionsErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Express order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetExpressOrderOptionsError = GetExpressOrderOptionsErrors[keyof GetExpressOrderOptionsErrors];

export type GetExpressOrderOptionsResponses = {
    /**
     * Express order created successfully
     */
    200: {
        options: Array<{
            id: string;
            name: string;
            imageUrl: string;
            description: string | null;
            express: boolean;
            expressPrice: string | null;
            createdAt: string;
            updatedAt: string;
            expressCategoryQuestions: Array<{
                id: string;
                categoryId: string;
                questionText: string;
                pickerType: 'DROPDOWN' | 'TEXTFIELD' | 'TEXTAREA' | 'SWITCH';
                options: Array<string | null> | null;
            }>;
        }>;
    };
};

export type GetExpressOrderOptionsResponse = GetExpressOrderOptionsResponses[keyof GetExpressOrderOptionsResponses];

export type GetOwnExpressOrdersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/orders/me/express';
};

export type GetOwnExpressOrdersErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Express orders not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetOwnExpressOrdersError = GetOwnExpressOrdersErrors[keyof GetOwnExpressOrdersErrors];

export type GetOwnExpressOrdersResponses = {
    /**
     * Express orders fetched successfully
     */
    200: {
        orders: Array<{
            id: string;
            userId: string;
            contractorId: string | null;
            categoryId: string;
            status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
            paymentIntentId: string | null;
            completionCode: string | null;
            orderStreet: string | null;
            orderCity: string | null;
            orderZip: string | null;
            startTime: string;
            endTime: string;
            weekdays: Array<string | null> | null;
            chosenDay: string | null;
            chosenStartTime: string | null;
            doneAt: string | null;
            userHasNeededTools: boolean;
            receiptUrl: string | null;
            createdAt: string;
            updatedAt: string;
            category: {
                id: string;
                name: string;
                imageUrl: string;
                description: string | null;
                express: boolean;
                expressPrice: string | null;
            };
            city: {
                id: string;
                cityName: string;
            };
        }>;
    };
};

export type GetOwnExpressOrdersResponse = GetOwnExpressOrdersResponses[keyof GetOwnExpressOrdersResponses];

export type SearchExpressOrdersData = {
    body?: {
        categoryIds: Array<string>;
        cityIds: Array<string>;
    };
    path?: never;
    query?: never;
    url: '/express-orders/search';
};

export type SearchExpressOrdersErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type SearchExpressOrdersError = SearchExpressOrdersErrors[keyof SearchExpressOrdersErrors];

export type SearchExpressOrdersResponses = {
    /**
     * Express orders found
     */
    200: {
        orders: Array<{
            id: string;
            userId: string;
            contractorId: string | null;
            categoryId: string;
            status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
            paymentIntentId: string | null;
            completionCode: string | null;
            orderStreet: string | null;
            orderCity: string | null;
            orderZip: string | null;
            startTime: string;
            endTime: string;
            weekdays: Array<string | null> | null;
            chosenDay: string | null;
            chosenStartTime: string | null;
            doneAt: string | null;
            userHasNeededTools: boolean;
            receiptUrl: string | null;
            createdAt: string;
            updatedAt: string;
            category: {
                id: string;
                name: string;
                imageUrl: string;
                description: string | null;
                express: boolean;
                expressPrice: string | null;
            };
            city: {
                id: string;
                cityName: string;
            };
            qna: Array<{
                id: string;
                expressOrderId: string;
                questionId: string;
                answer: string;
                question: {
                    id: string;
                    categoryId: string;
                    questionText: string;
                    pickerType: 'DROPDOWN' | 'TEXTFIELD' | 'TEXTAREA' | 'SWITCH';
                    options: Array<string | null> | null;
                };
            }>;
        }>;
    };
};

export type SearchExpressOrdersResponse = SearchExpressOrdersResponses[keyof SearchExpressOrdersResponses];

export type AcceptExpressOrderData = {
    body?: {
        chosenDay: string;
        chosenStartTime: string;
    };
    path: {
        orderId: string;
    };
    query?: never;
    url: '/orders/express/{orderId}/accept';
};

export type AcceptExpressOrderErrors = {
    /**
     * Express order not pending
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Express order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type AcceptExpressOrderError = AcceptExpressOrderErrors[keyof AcceptExpressOrderErrors];

export type AcceptExpressOrderResponses = {
    /**
     * Express order accepted
     */
    200: {
        message: string;
    };
};

export type AcceptExpressOrderResponse = AcceptExpressOrderResponses[keyof AcceptExpressOrderResponses];

export type CompleteOrderData = {
    body?: never;
    path: {
        orderId: string;
    };
    query?: never;
    url: '/orders/{orderId}/complete';
};

export type CompleteOrderErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type CompleteOrderError = CompleteOrderErrors[keyof CompleteOrderErrors];

export type CompleteOrderResponses = {
    /**
     * Order completed successfully
     */
    200: {
        message: string;
    };
};

export type CompleteOrderResponse = CompleteOrderResponses[keyof CompleteOrderResponses];

export type CompleteExpressOrderData = {
    body?: {
        code: string;
    };
    path: {
        orderId: string;
    };
    query?: never;
    url: '/orders/express/{orderId}/complete';
};

export type CompleteExpressOrderErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Express order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type CompleteExpressOrderError = CompleteExpressOrderErrors[keyof CompleteExpressOrderErrors];

export type CompleteExpressOrderResponses = {
    /**
     * Express order completed successfully
     */
    200: {
        message: string;
    };
};

export type CompleteExpressOrderResponse = CompleteExpressOrderResponses[keyof CompleteExpressOrderResponses];

export type GetExpressOrderDetailsData = {
    body?: never;
    path: {
        orderId: string;
    };
    query?: never;
    url: '/orders/express/{orderId}/details';
};

export type GetExpressOrderDetailsErrors = {
    /**
     * Express order not found
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Express order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetExpressOrderDetailsError = GetExpressOrderDetailsErrors[keyof GetExpressOrderDetailsErrors];

export type GetExpressOrderDetailsResponses = {
    /**
     * Express order details
     */
    200: {
        id: string;
        userId: string;
        contractorId: string | null;
        categoryId: string;
        status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
        paymentIntentId: string | null;
        completionCode: string | null;
        orderStreet: string | null;
        orderCity: string | null;
        orderZip: string | null;
        startTime: string;
        endTime: string;
        weekdays: Array<string | null> | null;
        chosenDay: string | null;
        chosenStartTime: string | null;
        doneAt: string | null;
        userHasNeededTools: boolean;
        receiptUrl: string | null;
        createdAt: string;
        updatedAt: string;
        category: {
            id: string;
            name: string;
            imageUrl: string;
            description: string | null;
            express: boolean;
            expressPrice: string | null;
        };
        city: {
            id: string;
            cityName: string;
        };
        user: {
            id: string;
            firstname: string | null;
            lastname: string | null;
            email: string;
            phoneNumber: string | null;
        };
        qna: Array<{
            id: string;
            expressOrderId: string;
            questionId: string;
            answer: string;
            question: {
                id: string;
                categoryId: string;
                questionText: string;
                pickerType: 'DROPDOWN' | 'TEXTFIELD' | 'TEXTAREA' | 'SWITCH';
                options: Array<string | null> | null;
            };
        }>;
    };
};

export type GetExpressOrderDetailsResponse = GetExpressOrderDetailsResponses[keyof GetExpressOrderDetailsResponses];

export type GetExpressOrdersByUserIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/users/{userId}/orders/express';
};

export type GetExpressOrdersByUserIdErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User or express orders not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetExpressOrdersByUserIdError = GetExpressOrdersByUserIdErrors[keyof GetExpressOrdersByUserIdErrors];

export type GetExpressOrdersByUserIdResponses = {
    /**
     * Express orders fetched successfully
     */
    200: Array<{
        id: string;
        userId: string;
        contractorId: string | null;
        categoryId: string;
        status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
        paymentIntentId: string | null;
        completionCode: string | null;
        orderStreet: string | null;
        orderCity: string | null;
        orderZip: string | null;
        startTime: string;
        endTime: string;
        weekdays: Array<string | null> | null;
        chosenDay: string | null;
        chosenStartTime: string | null;
        doneAt: string | null;
        userHasNeededTools: boolean;
        receiptUrl: string | null;
        createdAt: string;
        updatedAt: string;
        category: {
            id: string;
            name: string;
            imageUrl: string;
            description: string | null;
            express: boolean;
            expressPrice: string | null;
        };
        city: {
            id: string;
            cityName: string;
        };
    }>;
};

export type GetExpressOrdersByUserIdResponse = GetExpressOrdersByUserIdResponses[keyof GetExpressOrdersByUserIdResponses];

export type GetOrdersByUserIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/users/{userId}/orders';
};

export type GetOrdersByUserIdErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetOrdersByUserIdError = GetOrdersByUserIdErrors[keyof GetOrdersByUserIdErrors];

export type GetOrdersByUserIdResponses = {
    /**
     * Orders fetched successfully
     */
    200: Array<{
        id: string;
        userId: string;
        contractorId: string | null;
        categoryId: string | null;
        description: string | null;
        budget: number | null;
        status: 'pending' | 'accepted' | 'declined' | 'waitingForPayment' | 'done';
        orderStreet: string | null;
        orderCity: string | null;
        orderZip: string | null;
        locationMoreInfo: string | null;
        paymentIntentId: string | null;
        offersCount: number;
        doneAt: string | null;
        isDraft: boolean;
        draftStage: number;
        receiptUrl: string | null;
        createdAt: string;
        updatedAt: string;
    }>;
};

export type GetOrdersByUserIdResponse = GetOrdersByUserIdResponses[keyof GetOrdersByUserIdResponses];

export type GetCustomerServiceTicketsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/customer-service/tickets';
};

export type GetCustomerServiceTicketsErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
};

export type GetCustomerServiceTicketsError = GetCustomerServiceTicketsErrors[keyof GetCustomerServiceTicketsErrors];

export type GetCustomerServiceTicketsResponses = {
    /**
     * List
     */
    200: Array<{
        id: string;
        userId: string;
        content: string;
        status: string;
        assignedAdminId: string | null;
        createdAt: string;
        updatedAt: string;
        user: {
            id: string;
            firstname: string | null;
            lastname: string | null;
            email: string;
            phoneNumber: string | null;
            role: string;
        };
        messages: Array<{
            id: string;
            customerServiceTicketId: string;
            message: string;
            createdAt: string;
            updatedAt: string;
        }>;
    }>;
};

export type GetCustomerServiceTicketsResponse = GetCustomerServiceTicketsResponses[keyof GetCustomerServiceTicketsResponses];

export type CreateCustomerServiceTicketData = {
    body?: string;
    path?: never;
    query?: never;
    url: '/customer-service/tickets';
};

export type CreateCustomerServiceTicketErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type CreateCustomerServiceTicketError = CreateCustomerServiceTicketErrors[keyof CreateCustomerServiceTicketErrors];

export type CreateCustomerServiceTicketResponses = {
    /**
     * Ticket created
     */
    200: {
        message: string;
    };
};

export type CreateCustomerServiceTicketResponse = CreateCustomerServiceTicketResponses[keyof CreateCustomerServiceTicketResponses];

export type GetCustomerServiceTicketData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/customer-service/tickets/{id}';
};

export type GetCustomerServiceTicketErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
};

export type GetCustomerServiceTicketError = GetCustomerServiceTicketErrors[keyof GetCustomerServiceTicketErrors];

export type GetCustomerServiceTicketResponses = {
    /**
     * Ticket
     */
    200: unknown;
};

export type AddCustomerServiceTicketMessageData = {
    body?: {
        message: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/customer-service/tickets/{id}/messages';
};

export type AddCustomerServiceTicketMessageErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Ticket not found
     */
    404: {
        message: string;
    };
};

export type AddCustomerServiceTicketMessageError = AddCustomerServiceTicketMessageErrors[keyof AddCustomerServiceTicketMessageErrors];

export type AddCustomerServiceTicketMessageResponses = {
    /**
     * Added
     */
    200: {
        message: string;
    };
};

export type AddCustomerServiceTicketMessageResponse = AddCustomerServiceTicketMessageResponses[keyof AddCustomerServiceTicketMessageResponses];

export type UpdateCustomerServiceTicketData = {
    body?: {
        status: 'pending' | 'seen' | 'answered';
        assignedAdminId: string | null;
    };
    path: {
        ticketId: string;
    };
    query?: never;
    url: '/customer-service/tickets/{ticketId}';
};

export type UpdateCustomerServiceTicketErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type UpdateCustomerServiceTicketError = UpdateCustomerServiceTicketErrors[keyof UpdateCustomerServiceTicketErrors];

export type UpdateCustomerServiceTicketResponses = {
    /**
     * Ticket updated
     */
    200: {
        ticket: {
            id: string;
            userId: string;
            content: string;
            status: string;
            assignedAdminId: string | null;
        };
    };
};

export type UpdateCustomerServiceTicketResponse = UpdateCustomerServiceTicketResponses[keyof UpdateCustomerServiceTicketResponses];

export type GetNotificationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notifications';
};

export type GetNotificationsErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
};

export type GetNotificationsError = GetNotificationsErrors[keyof GetNotificationsErrors];

export type GetNotificationsResponses = {
    /**
     * Notifications list
     */
    200: Array<{
        id: string;
        userId: string;
        title: string;
        message: string;
        read: boolean;
        type: 'info' | 'newExpressOrder' | 'newOrder' | 'newOrderMoreInfoRequest' | 'newOrderMoreInfoRequestResponse' | 'newOrderMoreInfoRequestResponseImage' | 'expressOrderCompleted' | 'expressOrderCancelled' | 'expressOrderAccepted' | 'expressOrderWaitingForPayment' | 'supportTicketResponse' | 'supportTicketNew' | 'newContractorRating' | 'contractorApproved' | 'contractorRejected' | 'contractorMoreInfoNeeded' | 'newContractor' | 'offerExpired' | 'newOffer' | 'offerAccepted' | 'orderCancelled' | 'orderReminder' | 'orderRescheduled' | 'offerWithdrawn' | 'orderDeadlineApproaching' | 'welcomeMessage' | 'inactiveUserReminder' | 'newFeaturesAvailable' | 'maintenanceNotification' | 'promotionalOffer' | 'reviewRequest' | 'reviewResponse' | 'disputeOpened' | 'disputeResolved' | 'qualityAssurance' | 'areaNowAvailable' | 'contractorAvailable' | 'serviceAreaExpanded' | 'ticketEscalated' | 'ticketResolved' | 'stripeAccountUpdated' | 'stripeConnectionNeeded';
        content: string | number | boolean | null | {
            [key: string]: unknown;
        } | Array<unknown>;
        createdAt: string;
        updatedAt: string;
    }>;
};

export type GetNotificationsResponse = GetNotificationsResponses[keyof GetNotificationsResponses];

export type MarkNotificationReadData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/notifications/{id}/read';
};

export type MarkNotificationReadErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
};

export type MarkNotificationReadError = MarkNotificationReadErrors[keyof MarkNotificationReadErrors];

export type MarkNotificationReadResponses = {
    /**
     * Marked
     */
    200: {
        message: string;
    };
};

export type MarkNotificationReadResponse = MarkNotificationReadResponses[keyof MarkNotificationReadResponses];

export type MarkAllNotificationsReadData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notifications/mark-all-read';
};

export type MarkAllNotificationsReadErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
};

export type MarkAllNotificationsReadError = MarkAllNotificationsReadErrors[keyof MarkAllNotificationsReadErrors];

export type MarkAllNotificationsReadResponses = {
    /**
     * Marked
     */
    200: {
        message: string;
    };
};

export type MarkAllNotificationsReadResponse = MarkAllNotificationsReadResponses[keyof MarkAllNotificationsReadResponses];

export type GetAllOrderMoreInfoRequestsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/order-more-info-requests';
};

export type GetAllOrderMoreInfoRequestsErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
};

export type GetAllOrderMoreInfoRequestsError = GetAllOrderMoreInfoRequestsErrors[keyof GetAllOrderMoreInfoRequestsErrors];

export type GetAllOrderMoreInfoRequestsResponses = {
    /**
     * List
     */
    200: Array<{
        id: string;
        orderId: string;
        status: string;
        inquiry: string;
        orderStatus: string | null;
        response: string | null;
    }>;
};

export type GetAllOrderMoreInfoRequestsResponse = GetAllOrderMoreInfoRequestsResponses[keyof GetAllOrderMoreInfoRequestsResponses];

export type GetOrderMoreInfoRequestData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/order-more-info-requests/{id}';
};

export type GetOrderMoreInfoRequestErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Request not found
     */
    404: {
        message: string;
    };
};

export type GetOrderMoreInfoRequestError = GetOrderMoreInfoRequestErrors[keyof GetOrderMoreInfoRequestErrors];

export type GetOrderMoreInfoRequestResponses = {
    /**
     * Request
     */
    200: {
        id: string;
        orderId: string;
        status: string;
        inquiry: string;
        orderStatus: string | null;
        response: string | null;
    };
};

export type GetOrderMoreInfoRequestResponse = GetOrderMoreInfoRequestResponses[keyof GetOrderMoreInfoRequestResponses];

export type RespondOrderMoreInfoRequestData = {
    body?: {
        orderMoreInfoRequestId: string;
        response: string;
        images?: Array<string>;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/order-more-info-requests/{id}/response';
};

export type RespondOrderMoreInfoRequestErrors = {
    /**
     * Already answered
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Order or request not found
     */
    404: {
        message: string;
    };
};

export type RespondOrderMoreInfoRequestError = RespondOrderMoreInfoRequestErrors[keyof RespondOrderMoreInfoRequestErrors];

export type RespondOrderMoreInfoRequestResponses = {
    /**
     * Responded
     */
    200: {
        message: string;
    };
};

export type RespondOrderMoreInfoRequestResponse = RespondOrderMoreInfoRequestResponses[keyof RespondOrderMoreInfoRequestResponses];

export type AddCategoryData = {
    body?: {
        id?: string;
        name: string;
        imageUrl: string;
        description?: string | null;
        express?: boolean;
        expressPrice?: string | null;
        createdAt?: string;
        updatedAt?: string;
        extraQuestions?: Array<{
            questionText: string;
            pickerType: 'DROPDOWN' | 'TEXTFIELD' | 'TEXTAREA' | 'SWITCH';
            options: Array<string | null> | null;
        }>;
    };
    path?: never;
    query?: never;
    url: '/admin/categories';
};

export type AddCategoryErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Categories not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type AddCategoryError = AddCategoryErrors[keyof AddCategoryErrors];

export type AddCategoryResponses = {
    /**
     * Categories fetched successfully
     */
    200: {
        message: string;
    };
};

export type AddCategoryResponse = AddCategoryResponses[keyof AddCategoryResponses];

export type AcceptReviewData = {
    body?: {
        reviewId: string;
    };
    path?: never;
    query?: never;
    url: '/admin/reviews/accept';
};

export type AcceptReviewErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Review not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type AcceptReviewError = AcceptReviewErrors[keyof AcceptReviewErrors];

export type AcceptReviewResponses = {
    /**
     * Review accepted successfully
     */
    200: {
        message: string;
    };
};

export type AcceptReviewResponse = AcceptReviewResponses[keyof AcceptReviewResponses];

export type DeclineReviewData = {
    body?: {
        reviewId: string;
    };
    path?: never;
    query?: never;
    url: '/admin/reviews/decline';
};

export type DeclineReviewErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Review not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type DeclineReviewError = DeclineReviewErrors[keyof DeclineReviewErrors];

export type DeclineReviewResponses = {
    /**
     * Review declined successfully
     */
    200: {
        message: string;
    };
};

export type DeclineReviewResponse = DeclineReviewResponses[keyof DeclineReviewResponses];

export type ApproveContractorData = {
    body?: {
        contractorId: string;
    };
    path?: never;
    query?: never;
    url: '/admin/contractor/approve';
};

export type ApproveContractorErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Contractor not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type ApproveContractorError = ApproveContractorErrors[keyof ApproveContractorErrors];

export type ApproveContractorResponses = {
    /**
     * Contractor approved successfully
     */
    200: {
        message: string;
    };
};

export type ApproveContractorResponse = ApproveContractorResponses[keyof ApproveContractorResponses];

export type DeclineContractorData = {
    body?: {
        contractorId: string;
    };
    path?: never;
    query?: never;
    url: '/admin/contractor/decline';
};

export type DeclineContractorErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Contractor not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type DeclineContractorError = DeclineContractorErrors[keyof DeclineContractorErrors];

export type DeclineContractorResponses = {
    /**
     * Contractor declined successfully
     */
    200: {
        message: string;
    };
};

export type DeclineContractorResponse = DeclineContractorResponses[keyof DeclineContractorResponses];

export type DeleteCategoryData = {
    body?: never;
    path: {
        categoryId: string;
    };
    query?: never;
    url: '/admin/categories/{categoryId}';
};

export type DeleteCategoryErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Categories not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type DeleteCategoryError = DeleteCategoryErrors[keyof DeleteCategoryErrors];

export type DeleteCategoryResponses = {
    /**
     * Category deleted successfully
     */
    200: {
        message: string;
    };
};

export type DeleteCategoryResponse = DeleteCategoryResponses[keyof DeleteCategoryResponses];

export type GetAllReviewsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/reviews';
};

export type GetAllReviewsErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Review not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetAllReviewsError = GetAllReviewsErrors[keyof GetAllReviewsErrors];

export type GetAllReviewsResponses = {
    /**
     * Reviews fetched successfully
     */
    200: Array<{
        id: string;
        userId: string;
        contractorId: string;
        orderId: string;
        accepted: boolean;
        starRating: number;
        reviewTitle: string;
        review: string;
        createdAt: string;
        updatedAt: string;
    }>;
};

export type GetAllReviewsResponse = GetAllReviewsResponses[keyof GetAllReviewsResponses];

export type GetAllContractorJoinRequestsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/contractor/join-requests';
};

export type GetAllContractorJoinRequestsErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetAllContractorJoinRequestsError = GetAllContractorJoinRequestsErrors[keyof GetAllContractorJoinRequestsErrors];

export type GetAllContractorJoinRequestsResponses = {
    /**
     * Contractor join requests fetched successfully
     */
    200: Array<{
        userId: string;
        name: string;
        description: string;
        website: string | null;
        email: string;
        phone: string;
        addressStreet: string | null;
        addressDetail: string | null;
        addressZip: string | null;
        addressCountry: string | null;
        imageUrl: string | null;
        reviewAverage: string | null;
        reviewCount: number | null;
        verified: boolean | null;
        businessId: string | null;
        businessType: string | null;
        headerImageUrl: string | null;
        stripeConnectAccountId: string | null;
        stripeConnected: boolean;
        iban: string | null;
        bic: string | null;
        stripeAccountId: string | null;
        approvalStatus: string | null;
        createdAt: string;
        updatedAt: string;
    }>;
};

export type GetAllContractorJoinRequestsResponse = GetAllContractorJoinRequestsResponses[keyof GetAllContractorJoinRequestsResponses];

export type GetAllUsersData = {
    body?: never;
    path?: never;
    query?: {
        page?: number | null;
        limit?: number | null;
        search?: string;
    };
    url: '/admin/users';
};

export type GetAllUsersErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetAllUsersError = GetAllUsersErrors[keyof GetAllUsersErrors];

export type GetAllUsersResponses = {
    /**
     * Users fetched successfully
     */
    200: {
        users: Array<{
            id: string;
            externalId: string | null;
            firstname: string | null;
            lastname: string | null;
            email: string;
            phoneNumber: string | null;
            stripeCustomerId: string | null;
            badgeCountOffers: number;
            badgeCountMessages: number;
            role: 'consumer' | 'admin' | 'contractor';
            pushNotificationPermission: boolean | null;
            smsPermission: boolean | null;
            emailPermission: boolean | null;
            createdAt: string;
            updatedAt: string;
        }>;
        totalCount: number;
        page?: number;
        limit?: number;
        totalPages?: number;
    };
};

export type GetAllUsersResponse = GetAllUsersResponses[keyof GetAllUsersResponses];

export type GetLandingPageAnalyticsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/analytics/landing-page';
};

export type GetLandingPageAnalyticsErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Landing page analytics not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetLandingPageAnalyticsError = GetLandingPageAnalyticsErrors[keyof GetLandingPageAnalyticsErrors];

export type GetLandingPageAnalyticsResponses = {
    /**
     * Landing page analytics fetched successfully
     */
    200: {
        operations: {
            totalOrders: number;
            totalExpressOrders: number;
            orderStatusBreakdown: Array<{
                status: string;
                count: number;
            }>;
            avgCompletionTime: number | null;
            contractorApproval: Array<{
                approvalStatus: string | null;
                count: number;
            }>;
            avgOffersPerOrder: string | null;
            citiesCovered: number;
        };
        marketing: {
            userGrowth: Array<{
                month: string;
                count: number;
            }>;
            userRoleDistribution: Array<{
                role: string;
                count: number;
            }>;
            popularCategories: Array<{
                name: string;
                order_count: number;
            }>;
            expressCategoryUsage: Array<{
                name: string;
                express_order_count: number;
            }>;
            notificationStats: Array<{
                type: string;
                sent: number;
                read: number;
            }>;
            repeatCustomers: number;
        };
        finance: {
            totalRevenue: number;
            outstandingPayments: number;
            avgOrderValue: number;
            refundStats: Array<{
                type: string;
                count: number;
            }>;
            revenueByCategory: Array<{
                name: string;
                revenue: string;
            }>;
        };
        support: {
            ticketVolume: Array<{
                status: string;
                count: number;
            }>;
            avgResolutionTime: number | null;
            escalations: number;
            reviewCount: number;
            surveyInvites: number;
        };
    };
};

export type GetLandingPageAnalyticsResponse = GetLandingPageAnalyticsResponses[keyof GetLandingPageAnalyticsResponses];

export type GetCategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/categories';
};

export type GetCategoriesErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Categories not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetCategoriesError = GetCategoriesErrors[keyof GetCategoriesErrors];

export type GetCategoriesResponses = {
    /**
     * Categories fetched successfully
     */
    200: Array<{
        id: string;
        name: string;
        imageUrl: string;
        description: string | null;
        express: boolean;
        expressPrice: string | null;
        createdAt: string;
        updatedAt: string;
        extraQuestions?: Array<{
            id: string;
            categoryId: string;
            questionText: string;
            pickerType: 'DROPDOWN' | 'TEXTFIELD' | 'TEXTAREA' | 'SWITCH';
            options: Array<string | null> | null;
        }>;
    }>;
};

export type GetCategoriesResponse = GetCategoriesResponses[keyof GetCategoriesResponses];

export type GetAvailableCategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/available/categories/available';
};

export type GetAvailableCategoriesErrors = {
    /**
     * Bad request, cityId is required
     */
    400: {
        message: string;
    };
    /**
     * No categories found for the given city
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetAvailableCategoriesError = GetAvailableCategoriesErrors[keyof GetAvailableCategoriesErrors];

export type GetAvailableCategoriesResponses = {
    /**
     * Categories fetched successfully
     */
    200: Array<{
        contractorCount: number;
        categoryId: string;
        categoryName: string;
        categoryImageUrl: string;
    }>;
};

export type GetAvailableCategoriesResponse = GetAvailableCategoriesResponses[keyof GetAvailableCategoriesResponses];

export type GetReviewsForContractorData = {
    body?: never;
    path: {
        contractorId: string;
    };
    query?: never;
    url: '/reviews/contractor/{contractorId}';
};

export type GetReviewsForContractorErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Reviews not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetReviewsForContractorError = GetReviewsForContractorErrors[keyof GetReviewsForContractorErrors];

export type GetReviewsForContractorResponses = {
    /**
     * Reviews fetched successfully
     */
    200: Array<{
        id: string;
        userId: string;
        contractorId: string;
        orderId: string;
        accepted: boolean;
        starRating: number;
        reviewTitle: string;
        review: string;
        createdAt: string;
        updatedAt: string;
        userFirstname: string | null;
        orderZip: string | null;
    }>;
};

export type GetReviewsForContractorResponse = GetReviewsForContractorResponses[keyof GetReviewsForContractorResponses];

export type AddNewReviewForContractorData = {
    body?: {
        starRating: number;
        reviewTitle: string;
        review: string;
        orderId: string;
    };
    path: {
        contractorId: string;
    };
    query?: never;
    url: '/reviews/contractor/{contractorId}';
};

export type AddNewReviewForContractorErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Review not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type AddNewReviewForContractorError = AddNewReviewForContractorErrors[keyof AddNewReviewForContractorErrors];

export type AddNewReviewForContractorResponses = {
    /**
     * Review added successfully
     */
    200: {
        message: string;
    };
};

export type AddNewReviewForContractorResponse = AddNewReviewForContractorResponses[keyof AddNewReviewForContractorResponses];

export type CreatePaymentIntentData = {
    body?: {
        offerId: string;
    };
    path?: never;
    query?: never;
    url: '/payment/create-payment-intent';
};

export type CreatePaymentIntentErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Offer or user not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type CreatePaymentIntentError = CreatePaymentIntentErrors[keyof CreatePaymentIntentErrors];

export type CreatePaymentIntentResponses = {
    /**
     * Payment intent created successfully
     */
    200: {
        paymentIntent: string;
        ephemeralKey: string;
        customer: string;
        publishableKey: string;
    };
};

export type CreatePaymentIntentResponse = CreatePaymentIntentResponses[keyof CreatePaymentIntentResponses];

export type CreateExpressPaymentIntentData = {
    body?: {
        expressOrderId: string;
    };
    path?: never;
    query?: never;
    url: '/payment/create-express-payment-intent';
};

export type CreateExpressPaymentIntentErrors = {
    /**
     * Bad request
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Offer or user not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type CreateExpressPaymentIntentError = CreateExpressPaymentIntentErrors[keyof CreateExpressPaymentIntentErrors];

export type CreateExpressPaymentIntentResponses = {
    /**
     * Payment intent created successfully
     */
    200: {
        paymentIntent: string;
        ephemeralKey: string;
        customer: string;
        publishableKey: string;
        order: {
            id: string;
            userId: string;
            startTime: string;
            endTime: string;
            weekdays: Array<string> | null;
            userHasNeededTools: boolean;
            category: {
                id: string;
                name: string;
                description: string | null;
                imageUrl: string;
                express: boolean;
                expressPrice: string | null;
            };
        };
    };
};

export type CreateExpressPaymentIntentResponse = CreateExpressPaymentIntentResponses[keyof CreateExpressPaymentIntentResponses];

export type CreateStripeAccountLinkData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/billing/account/create/link';
};

export type CreateStripeAccountLinkErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Express order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type CreateStripeAccountLinkError = CreateStripeAccountLinkErrors[keyof CreateStripeAccountLinkErrors];

export type CreateStripeAccountLinkResponses = {
    /**
     * Account link created successfully
     */
    200: {
        accountLink: {
            object: string;
            created: number;
            expires_at: number;
            url: string;
        };
    };
};

export type CreateStripeAccountLinkResponse = CreateStripeAccountLinkResponses[keyof CreateStripeAccountLinkResponses];

export type GetUpdateStripeAccountDetailsLinkData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/billing/account/update/link';
};

export type GetUpdateStripeAccountDetailsLinkErrors = {
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Contractor not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type GetUpdateStripeAccountDetailsLinkError = GetUpdateStripeAccountDetailsLinkErrors[keyof GetUpdateStripeAccountDetailsLinkErrors];

export type GetUpdateStripeAccountDetailsLinkResponses = {
    /**
     * Account details link created successfully
     */
    200: {
        accountLink: {
            object: string;
            created: number;
            expires_at: number;
            url: string;
        };
    };
};

export type GetUpdateStripeAccountDetailsLinkResponse = GetUpdateStripeAccountDetailsLinkResponses[keyof GetUpdateStripeAccountDetailsLinkResponses];

export type CancelOfferData = {
    body?: {
        offerId: string;
    };
    path?: never;
    query?: never;
    url: '/offers/{offerId}/cancel';
};

export type CancelOfferErrors = {
    /**
     * Offer not cancelled
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Offer not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type CancelOfferError = CancelOfferErrors[keyof CancelOfferErrors];

export type CancelOfferResponses = {
    /**
     * Offer cancelled
     */
    200: {
        message: string;
    };
};

export type CancelOfferResponse = CancelOfferResponses[keyof CancelOfferResponses];

export type CreateOfferData = {
    body?: {
        orderId: string;
        categoryId: string;
        date?: string | null;
        startTime?: string | null;
        endTime?: string | null;
        offerPrice?: string | null;
        materialCost?: string | null;
        offerDescription?: string | null;
        status?: 'pending' | 'accepted' | 'declined';
    };
    path?: never;
    query?: never;
    url: '/offers';
};

export type CreateOfferErrors = {
    /**
     * Offer not created
     */
    400: {
        message: string;
    };
    /**
     * Unauthorized
     */
    401: {
        message: string;
    };
    /**
     * Order not found
     */
    404: {
        message: string;
    };
    /**
     * Internal server error
     */
    500: {
        message: string;
    };
};

export type CreateOfferError = CreateOfferErrors[keyof CreateOfferErrors];

export type CreateOfferResponses = {
    /**
     * Offer created
     */
    200: {
        message: string;
    };
};

export type CreateOfferResponse = CreateOfferResponses[keyof CreateOfferResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:3000' | (string & {});
};